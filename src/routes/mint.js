const express = require('express');
const { v4: uuidv4 } = require('uuid');
const bs58 = require("bs58");

const router = express.Router();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ–ø–µ—Ä–∞—Ü–∏–π –º–∏–Ω—Ç–∏–Ω–≥–∞ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π Redis/DB)
const mintOperations = new Map();

// –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
let solanaService = null;
let collectionsService = null;
let databaseService = null;
let indexingMonitor = null; // ‚úÖ –ù–û–í–û–ï

function getSolanaService() {
  if (!solanaService) {
    const SolanaService = require('../services/solana');
    solanaService = new SolanaService();
  }
  return solanaService;
}

function getCollectionsService() {
  if (!collectionsService) {
    const { CollectionsService } = require('../services/collections');
    collectionsService = new CollectionsService();
  }
  return collectionsService;
}

function getDatabaseService() {
  if (!databaseService) {
    const { DatabaseService } = require('../services/database');
    databaseService = new DatabaseService();
  }
  return databaseService;
}

// ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è indexing monitor
function getIndexingMonitor() {
  if (!indexingMonitor) {
    const { getIndexingMonitor: createMonitor } = require('../services/indexing-monitor');
    indexingMonitor = createMonitor();
  }
  return indexingMonitor;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∏–∑ reference/config.js)
const DEFAULT_CONFIG = {
  treeAddress: process.env.TREE_ADDRESS || "",
  collectionAddress: process.env.COLLECTION_ADDRESS || "",
  defaultRecipient: process.env.DEFAULT_RECIPIENT || "",
  sellerFeeBasisPoints: 0,
  maxRetries: 3
};

// POST /api/mint/single - –ú–∏–Ω—Ç –æ–¥–Ω–æ–≥–æ NFT –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
router.post('/single', async (req, res) => {
  try {
    console.log('[Mint API] –ó–∞–ø—Ä–æ—Å –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –º–∏–Ω—Ç–∏–Ω–≥–∞:', req.body);
    
    const { 
      collection,    // üîÑ –ò–ó–ú–ï–ù–ï–ù–ò–ï: —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      recipient, 
      metadata
    } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!collection || !collection.id || !collection.name) {
      return res.status(400).json({
        success: false,
        error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: collection.id, collection.name'
      });
    }

    if (!metadata || !metadata.name || !metadata.uri) {
      return res.status(400).json({
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: metadata.name –∏ metadata.uri'
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤ –±–ª–æ–∫—á–µ–π–Ω–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    if (!collection.treeAddress || !collection.collectionAddress) {
      return res.status(400).json({
        success: false,
        error: '–í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞: treeAddress, collectionAddress'
      });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ Solana —Å–µ—Ä–≤–∏—Å (Collections Service –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω)
    const solanaService = getSolanaService();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤ Solana
    if (!solanaService.isValidSolanaAddress(collection.treeAddress)) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç treeAddress'
      });
    }

    if (!solanaService.isValidSolanaAddress(collection.collectionAddress)) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç collectionAddress'
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const finalRecipient = recipient || process.env.DEFAULT_RECIPIENT;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    if (!solanaService.isValidSolanaAddress(finalRecipient)) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç recipient –∞–¥—Ä–µ—Å–∞'
      });
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –æ–ø–µ—Ä–∞—Ü–∏–∏
    const operationId = uuidv4();
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const operationData = {
      id: operationId,
      type: 'single',
      status: 'processing',
      createdAt: new Date().toISOString(),
      collectionId: collection.id,
      collection: {
        name: collection.name,
        symbol: collection.symbol || 'cNFT'
      },
      recipient: finalRecipient,
      metadata: metadata
    };
    
    mintOperations.set(operationId, operationData);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    const databaseService = getDatabaseService();
    await databaseService.saveMintOperation(operationData);
    
    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ID –æ–ø–µ—Ä–∞—Ü–∏–∏ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å)
    res.json({
      success: true,
      data: {
        operationId,
        status: 'processing',
        collectionId: collection.id,
        collectionName: collection.name,
        message: '–û–ø–µ—Ä–∞—Ü–∏—è –º–∏–Ω—Ç–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞'
      }
    });
    
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–Ω—Ç–∏–Ω–≥–∞
    setImmediate(async () => {
      try {
        const operation = mintOperations.get(operationId);
        
        // –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        const finalMetadata = {
          ...metadata,
          symbol: metadata.symbol || collection.symbol || 'cNFT',
          sellerFeeBasisPoints: metadata.sellerFeeBasisPoints !== undefined 
            ? metadata.sellerFeeBasisPoints 
            : (collection.sellerFeeBasisPoints || 0),
          // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º creators –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
          creators: metadata.creators || metadata.properties?.creators || [
            {
              address: collection.creatorAddress || process.env.DEFAULT_CREATOR_ADDRESS || process.env.DEFAULT_RECIPIENT,
              share: 100,
              verified: true
            }
          ]
        };
        
        console.log('[Mint API] üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', {
          originalMetadata: metadata,
          finalMetadata,
          hasCreators: !!finalMetadata.creators,
          creatorsCount: finalMetadata.creators?.length || 0,
          collectionData: {
            id: collection.id,
            name: collection.name,
            treeAddress: collection.treeAddress,
            collectionAddress: collection.collectionAddress
          }
        });
        
        const result = await solanaService.mintSingleNFT({
          treeAddress: collection.treeAddress,
          collectionAddress: collection.collectionAddress,
          recipient: finalRecipient,
          metadata: finalMetadata,
          maxAttempts: 3
        });
        
        // üîÑ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ
        // –ù–æ –Ω–µ –±—É–¥–µ–º –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç Collections Service –∏ Supabase
        console.log(`[Mint API] ‚úÖ NFT —É—Å–ø–µ—à–Ω–æ –∑–∞–º–∏–Ω—Ç–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ${collection.name}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
        const updatedOperation = {
          ...operation,
          status: 'completed',
          completedAt: new Date().toISOString(),
          result: result
        };

        mintOperations.set(operationId, updatedOperation);

        // ‚úÖ –ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ DAS –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        if (result.success && result.assetId) {
          console.log(`[Mint API] üîç –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ DAS –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–ª—è ${result.assetId}`);
          
          const monitor = getIndexingMonitor();
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ NFT
          monitor.startMonitoring(operationId, result.assetId, {
            treeAddress: collection.treeAddress,
            leafIndex: result.leafIndex,
            collection: collection.name,
            nftName: finalMetadata.name,
            signature: result.signature,
            recipient: finalRecipient
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
          updatedOperation.monitoringStarted = true;
          updatedOperation.monitoringStartedAt = new Date().toISOString();
          mintOperations.set(operationId, updatedOperation);
        } else {
          console.warn(`[Mint API] ‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω: ${!result.success ? '–º–∏–Ω—Ç –Ω–µ—É—Å–ø–µ—à–µ–Ω' : '–Ω–µ—Ç assetId'}`);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const databaseService = getDatabaseService();
        await databaseService.updateMintOperation(operationId, {
          status: 'completed',
          completedAt: updatedOperation.completedAt,
          result: result,
          monitoringStarted: updatedOperation.monitoringStarted || false
        });
        
        console.log(`[Mint API] –û–ø–µ—Ä–∞—Ü–∏—è ${operationId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        
      } catch (error) {
        console.error(`[Mint API] –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId}:`, error.message);
        
        const operation = mintOperations.get(operationId);
        const failedOperation = {
          ...operation,
          status: 'failed',
          completedAt: new Date().toISOString(),
          error: error.message
        };
        
        mintOperations.set(operationId, failedOperation);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const databaseService = getDatabaseService();
        await databaseService.updateMintOperation(operationId, {
          status: 'failed',
          completedAt: failedOperation.completedAt,
          error: error.message
        });
      }
    });
    
  } catch (error) {
    console.error('[Mint API] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message
    });
  }
});

// POST /api/mint/batch - –ü–∞–∫–µ—Ç–Ω—ã–π –º–∏–Ω—Ç NFT –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
router.post('/batch', async (req, res) => {
  try {
    console.log('[Mint API] –ó–∞–ø—Ä–æ—Å –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –º–∏–Ω—Ç–∏–Ω–≥–∞:', req.body);
    
    const { 
      collectionId,  // ID –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      items
    } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!collectionId) {
      return res.status(400).json({
        success: false,
        error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: collectionId'
      });
    }
    
    if (!Array.isArray(items) || items.length === 0) {
      return res.status(400).json({
        success: false,
        error: '–ü–æ–ª–µ items –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º'
      });
    }
    
    if (items.length > 50) {
      return res.status(400).json({
        success: false,
        error: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ NFT –≤ –ø–∞–∫–µ—Ç–µ: 50'
      });
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    const collectionsService = getCollectionsService();
    const solanaService = getSolanaService();
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const collection = await collectionsService.getCollection(collectionId);
    if (!collection) {
      return res.status(404).json({
        success: false,
        error: `–ö–æ–ª–ª–µ–∫—Ü–∏—è ${collectionId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–∏–Ω—Ç–∏–Ω–≥–∞
    const mintCheck = await collectionsService.canMintInCollection(collectionId);
    if (!mintCheck.canMint) {
      return res.status(400).json({
        success: false,
        error: `–ú–∏–Ω—Ç–∏–Ω–≥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω: ${mintCheck.reason}`
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
    for (let i = 0; i < items.length; i++) {
      const item = items[i];
      if (!item.metadata || !item.metadata.name || !item.metadata.uri) {
        return res.status(400).json({
          success: false,
          error: `–≠–ª–µ–º–µ–Ω—Ç ${i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è metadata.name –∏ metadata.uri`
        });
      }
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –æ–ø–µ—Ä–∞—Ü–∏–∏
    const operationId = uuidv4();
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–ø–µ—Ä–∞—Ü–∏–∏
    mintOperations.set(operationId, {
      id: operationId,
      type: 'batch',
      status: 'processing',
      createdAt: new Date().toISOString(),
      collectionId: collectionId,
      collection: {
        name: collection.name,
        symbol: collection.symbol
      },
      totalItems: items.length,
      processedItems: 0,
      successfulItems: 0,
      failedItems: 0,
      items: items.map((item, index) => ({
        index,
        recipient: item.recipient || process.env.DEFAULT_RECIPIENT,
        metadata: item.metadata,
        status: 'pending'
      }))
    });
    
    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ID –æ–ø–µ—Ä–∞—Ü–∏–∏
    res.json({
      success: true,
      data: {
        operationId,
        status: 'processing',
        collectionId,
        collectionName: collection.name,
        totalItems: items.length,
        message: '–ü–∞–∫–µ—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –º–∏–Ω—Ç–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞'
      }
    });
    
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –º–∏–Ω—Ç–∏–Ω–≥–∞
    setImmediate(async () => {
      let operation = mintOperations.get(operationId);
      let successCount = 0;
      
      for (let i = 0; i < items.length; i++) {
        const item = items[i];
        const finalRecipient = item.recipient || process.env.DEFAULT_RECIPIENT;
        
        try {
          console.log(`[Mint API] –ü–∞–∫–µ—Ç ${operationId}: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ ${i + 1}/${items.length}`);
          
          // –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
          const finalMetadata = {
            ...item.metadata,
            symbol: item.metadata.symbol || collection.symbol,
            sellerFeeBasisPoints: item.metadata.sellerFeeBasisPoints !== undefined 
              ? item.metadata.sellerFeeBasisPoints 
              : collection.metadata.sellerFeeBasisPoints,
            // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º creators –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
            creators: item.metadata.creators || item.metadata.properties?.creators || [
              {
                address: process.env.DEFAULT_CREATOR_ADDRESS || process.env.DEFAULT_RECIPIENT,
                share: 100,
                verified: true
              }
            ]
          };
          
          const result = await solanaService.mintSingleNFT({
            treeAddress: collection.treeAddress,
            collectionAddress: collection.collectionAddress,
            recipient: finalRecipient,
            metadata: finalMetadata,
            maxAttempts: 3
          });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —ç–ª–µ–º–µ–Ω—Ç–∞
          operation = mintOperations.get(operationId);
          operation.items[i].status = 'completed';
          operation.items[i].result = result;
          operation.successfulItems++;
          successCount++;
          
        } catch (error) {
          console.error(`[Mint API] –û—à–∏–±–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ ${i} –≤ –ø–∞–∫–µ—Ç–µ ${operationId}:`, error.message);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —ç–ª–µ–º–µ–Ω—Ç–∞
          operation = mintOperations.get(operationId);
          operation.items[i].status = 'failed';
          operation.items[i].error = error.message;
          operation.failedItems++;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        operation.processedItems++;
        mintOperations.set(operationId, operation);
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –º–∏–Ω—Ç–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ (–∏–∑ reference)
        if (i < items.length - 1) {
          await solanaService.sleep(2000);
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      await collectionsService.updateMintStats(collectionId, successCount);
      
      // –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
      operation = mintOperations.get(operationId);
      operation.status = 'completed';
      operation.completedAt = new Date().toISOString();
      mintOperations.set(operationId, operation);
      
      console.log(`[Mint API] –ü–∞–∫–µ—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è ${operationId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: ${operation.successfulItems}, –û—à–∏–±–æ–∫: ${operation.failedItems}`);
    });
    
  } catch (error) {
    console.error('[Mint API] –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message
    });
  }
});

// GET /api/mint/status/:id - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
router.get('/status/:id', (req, res) => {
  try {
    const { id } = req.params;
    
    const operation = mintOperations.get(id);
    
    if (!operation) {
      return res.status(404).json({
        success: false,
        error: '–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (operation.type === 'single') {
      res.json({
        success: true,
        data: {
          operationId: operation.id,
          type: operation.type,
          status: operation.status,
          createdAt: operation.createdAt,
          completedAt: operation.completedAt,
          collectionId: operation.collectionId,
          collection: operation.collection,
          recipient: operation.recipient,
          metadata: operation.metadata,
          result: operation.result,
          error: operation.error
        }
      });
    } else if (operation.type === 'batch') {
      res.json({
        success: true,
        data: {
          operationId: operation.id,
          type: operation.type,
          status: operation.status,
          createdAt: operation.createdAt,
          completedAt: operation.completedAt,
          collectionId: operation.collectionId,
          collection: operation.collection,
          totalItems: operation.totalItems,
          processedItems: operation.processedItems,
          successfulItems: operation.successfulItems,
          failedItems: operation.failedItems,
          progress: operation.totalItems > 0 ? (operation.processedItems / operation.totalItems * 100).toFixed(2) : 0,
          items: operation.items
        }
      });
    }
    
  } catch (error) {
    console.error('[Mint API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// GET /api/mint/operations - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
router.get('/operations', async (req, res) => {
  try {
    const { status, type, collectionId, limit = 50 } = req.query;
    
    const databaseService = getDatabaseService();
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const dbResult = await databaseService.getMintOperations({
      status,
      type,
      collectionId,
      limit: parseInt(limit)
    });
    
    let operations = [];
    let total = 0;
    
    if (dbResult.success && dbResult.data && dbResult.data.length > 0) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
      operations = dbResult.data;
      total = dbResult.total || operations.length;
      console.log(`[Mint API] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${operations.length} –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
    } else {
      // Fallback –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏
      operations = Array.from(mintOperations.values());
      
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
      if (status) {
        operations = operations.filter(op => op.status === status);
      }
      
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É
      if (type) {
        operations = operations.filter(op => op.type === type);
      }
      
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      if (collectionId) {
        operations = operations.filter(op => op.collectionId === collectionId);
      }
      
      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
      operations.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
      
      // –õ–∏–º–∏—Ç
      operations = operations.slice(0, parseInt(limit));
      total = mintOperations.size;
      
      console.log(`[Mint API] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏: ${operations.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const summary = operations.map(op => ({
      operationId: op.id,
      type: op.type,
      status: op.status,
      createdAt: op.createdAt,
      completedAt: op.completedAt,
      collectionId: op.collectionId,
      collection: op.collection,
      recipient: op.recipient || null,
      metadata: op.metadata || null,
      result: op.result || null,
      error: op.error || null,
      ...(op.type === 'batch' && {
        totalItems: op.totalItems,
        processedItems: op.processedItems,
        successfulItems: op.successfulItems,
        failedItems: op.failedItems
      })
    }));
    
    res.json({
      success: true,
      data: {
        operations: summary,
        total: total
      }
    });
    
  } catch (error) {
    console.error('[Mint API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// GET /api/mint/das-status/:assetId - –ü—Ä–æ–≤–µ—Ä–∫–∞ DAS –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ NFT
router.get('/das-status/:assetId', async (req, res) => {
  try {
    const { assetId } = req.params;
    
    if (!assetId) {
      return res.status(400).json({
        success: false,
        error: 'Asset ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    console.log(`[Mint API] –ü—Ä–æ–≤–µ—Ä–∫–∞ DAS —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è asset: ${assetId}`);
    
    const solanaService = getSolanaService();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º DAS –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    const dasStatus = await solanaService.checkDASIndexing(assetId, 3, 2000); // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    
    // –ü–æ–ª—É—á–∞–µ–º asset proof
    const proofStatus = await solanaService.getAssetProofFromDAS(assetId);
    
    const response = {
      success: true,
      data: {
        assetId,
        indexed: dasStatus.indexed,
        phantomReady: dasStatus.indexed && proofStatus.success,
        indexingTime: dasStatus.totalTime || null,
        proofAvailable: proofStatus.success,
        recommendations: [],
        timestamp: new Date().toISOString()
      }
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (!dasStatus.indexed) {
      response.data.recommendations.push('NFT –µ—â–µ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 15-30 –º–∏–Ω—É—Ç');
      response.data.recommendations.push('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –Ω–æ NFT –º–æ–∂–µ—Ç –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∫–æ—à–µ–ª—å–∫–µ');
    }
    
    if (!proofStatus.success && dasStatus.indexed) {
      response.data.recommendations.push('Asset –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω, –Ω–æ proof –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    }
    
    if (dasStatus.indexed && proofStatus.success) {
      response.data.recommendations.push('NFT –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∏ –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ Phantom Wallet');
    }
    
    console.log(`[Mint API] DAS —Å—Ç–∞—Ç—É—Å –¥–ª—è ${assetId}:`, {
      indexed: response.data.indexed,
      phantomReady: response.data.phantomReady
    });
    
    res.json(response);
    
  } catch (error) {
    console.error('[Mint API] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ DAS —Å—Ç–∞—Ç—É—Å–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ DAS —Å—Ç–∞—Ç—É—Å–∞',
      details: error.message
    });
  }
});

// POST /api/mint/recheck-indexing - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
router.post('/recheck-indexing', async (req, res) => {
  try {
    const { assetId, operationId } = req.body;
    
    if (!assetId) {
      return res.status(400).json({
        success: false,
        error: 'Asset ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    console.log(`[Mint API] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–ª—è: ${assetId}`);
    
    const solanaService = getSolanaService();
    
    // –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º
    const fullDiagnostics = await solanaService.performCompressedNFTDiagnostics(
      assetId, 
      req.body.treeAddress, 
      req.body.leafIndex
    );
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å operationId, –æ–±–Ω–æ–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
    if (operationId && mintOperations.has(operationId)) {
      const operation = mintOperations.get(operationId);
      
      const updatedOperation = {
        ...operation,
        dasStatus: fullDiagnostics,
        phantomReady: fullDiagnostics.summary?.phantomReady || false,
        lastChecked: new Date().toISOString()
      };
      
      mintOperations.set(operationId, updatedOperation);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const databaseService = getDatabaseService();
      await databaseService.updateMintOperation(operationId, {
        dasStatus: fullDiagnostics,
        phantomReady: fullDiagnostics.summary?.phantomReady || false
      });
    }
    
    res.json({
      success: true,
      data: {
        assetId,
        diagnostics: fullDiagnostics,
        operationUpdated: !!operationId,
        timestamp: new Date().toISOString()
      }
    });
    
  } catch (error) {
    console.error('[Mint API] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏',
      details: error.message
    });
  }
});

// ‚úÖ –ù–û–í–´–ï ENDPOINTS –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º

// GET /api/mint/monitoring/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
router.get('/monitoring/stats', async (req, res) => {
  try {
    const monitor = getIndexingMonitor();
    const stats = monitor.getMonitoringStats();
    
    res.json({
      success: true,
      data: stats
    });
    
  } catch (error) {
    console.error('[Mint API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
      details: error.message
    });
  }
});

// GET /api/mint/monitoring/active - –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
router.get('/monitoring/active', async (req, res) => {
  try {
    const monitor = getIndexingMonitor();
    const activeOperations = monitor.getActiveOperations();
    
    res.json({
      success: true,
      data: {
        total: activeOperations.length,
        operations: activeOperations
      }
    });
    
  } catch (error) {
    console.error('[Mint API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π',
      details: error.message
    });
  }
});

// GET /api/mint/monitoring/:operationId - –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
router.get('/monitoring/:operationId', async (req, res) => {
  try {
    const { operationId } = req.params;
    const monitor = getIndexingMonitor();
    
    const status = monitor.getOperationStatus(operationId);
    
    if (!status) {
      return res.status(404).json({
        success: false,
        error: '–û–ø–µ—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    res.json({
      success: true,
      data: status
    });
    
  } catch (error) {
    console.error('[Mint API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
      details: error.message
    });
  }
});

// POST /api/mint/monitoring/:operationId/stop - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
router.post('/monitoring/:operationId/stop', async (req, res) => {
  try {
    const { operationId } = req.params;
    const { reason = 'manual' } = req.body;
    
    const monitor = getIndexingMonitor();
    const stopped = monitor.stopMonitoring(operationId, reason);
    
    if (!stopped) {
      return res.status(404).json({
        success: false,
        error: '–û–ø–µ—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
      });
    }
    
    res.json({
      success: true,
      data: {
        operationId,
        stopped: true,
        reason
      }
    });
    
  } catch (error) {
    console.error('[Mint API] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
      details: error.message
    });
  }
});

// ‚úÖ –ù–û–í–´–ï WEBHOOK ENDPOINTS

// POST /api/mint/webhooks - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è webhook
router.post('/webhooks', async (req, res) => {
  try {
    const { url, events, headers, secret } = req.body;
    
    if (!url) {
      return res.status(400).json({
        success: false,
        error: 'URL webhook –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    const monitor = getIndexingMonitor();
    const webhookNotifier = monitor.webhookNotifier;
    
    if (!webhookNotifier) {
      return res.status(503).json({
        success: false,
        error: 'Webhook —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
      });
    }

    const webhookId = require('crypto').randomUUID();
    const webhook = webhookNotifier.registerWebhook(webhookId, {
      url,
      events: events || ['indexingCompleted', 'indexingTimeout', 'indexingError'],
      headers: headers || {},
      secret
    });
    
    res.json({
      success: true,
      data: webhook
    });
    
  } catch (error) {
    console.error('[Mint API] –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ webhook:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ webhook',
      details: error.message
    });
  }
});

// GET /api/mint/webhooks - –°–ø–∏—Å–æ–∫ webhooks
router.get('/webhooks', async (req, res) => {
  try {
    const monitor = getIndexingMonitor();
    const webhookNotifier = monitor.webhookNotifier;
    
    if (!webhookNotifier) {
      return res.status(503).json({
        success: false,
        error: 'Webhook —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
      });
    }

    const stats = webhookNotifier.getWebhookStats();
    
    res.json({
      success: true,
      data: stats
    });
    
  } catch (error) {
    console.error('[Mint API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhooks:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhooks',
      details: error.message
    });
  }
});

// DELETE /api/mint/webhooks/:id - –£–¥–∞–ª–µ–Ω–∏–µ webhook
router.delete('/webhooks/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
    const monitor = getIndexingMonitor();
    const webhookNotifier = monitor.webhookNotifier;
    
    if (!webhookNotifier) {
      return res.status(503).json({
        success: false,
        error: 'Webhook —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
      });
    }

    const removed = webhookNotifier.unregisterWebhook(id);
    
    if (!removed) {
      return res.status(404).json({
        success: false,
        error: 'Webhook –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    res.json({
      success: true,
      data: {
        id,
        removed: true
      }
    });
    
  } catch (error) {
    console.error('[Mint API] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook',
      details: error.message
    });
  }
});

// POST /api/mint/webhooks/:id/test - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook
router.post('/webhooks/:id/test', async (req, res) => {
  try {
    const { id } = req.params;
    
    const monitor = getIndexingMonitor();
    const webhookNotifier = monitor.webhookNotifier;
    
    if (!webhookNotifier) {
      return res.status(503).json({
        success: false,
        error: 'Webhook —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
      });
    }

    const result = await webhookNotifier.testWebhook(id);
    
    res.json({
      success: true,
      data: result
    });
    
  } catch (error) {
    console.error('[Mint API] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook',
      details: error.message
    });
  }
});

module.exports = router; 