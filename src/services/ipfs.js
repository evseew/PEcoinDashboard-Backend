const fs = require('fs').promises;
const fsSync = require('fs');
const path = require('path');

class IPFSService {
  constructor() {
    this.isConnected = false;
    this.pinataApiUrl = 'https://api.pinata.cloud/pinning/pinFileToIPFS';
    this.pinataJsonUrl = 'https://api.pinata.cloud/pinning/pinJSONToIPFS';
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º Promise,
    // —á—Ç–æ–±—ã –≤ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –≤—ã–∑–æ–≤–∞—Ö –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.
    this.ready = this.initializePinata();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pinata
  async initializePinata() {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —á—Ç–æ –≤ reference –∫–æ–¥–µ
      const apiKey = process.env.PINATA_API_KEY;
      const secretKey = process.env.PINATA_SECRET_KEY || process.env.PINATA_SECRET_API_KEY; // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
      
      if (!apiKey || !secretKey) {
        console.log('[IPFS Service] Pinata credentials –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–∫-—Ä–µ–∂–∏–º');
        console.log('[IPFS Service] –ù—É–∂–Ω—ã: PINATA_API_KEY –∏ PINATA_SECRET_API_KEY');
        return;
      }
      
      // –°–æ–∑–¥–∞–µ–º SDK –∫–ª–∏–µ–Ω—Ç –æ–¥–∏–Ω —Ä–∞–∑
      const PinataSDK = require('@pinata/sdk');
      this.pinata = new PinataSDK({ pinataApiKey: apiKey, pinataSecretApiKey: secretKey });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ API
      try {
        const testResponse = await fetch('https://api.pinata.cloud/data/testAuthentication', {
          method: 'GET',
          headers: {
            'pinata_api_key': apiKey,
            'pinata_secret_api_key': secretKey,
          }
        });
        
        if (testResponse.ok) {
          this.isConnected = true;
          console.log('[IPFS Service] ‚úÖ Pinata –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ (HTTP API)');
        } else {
          console.log('[IPFS Service] ‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Pinata:', testResponse.status);
        }
      } catch (testError) {
        console.log('[IPFS Service] ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Pinata:', testError.message);
      }
      
    } catch (error) {
      console.log('[IPFS Service] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Pinata:', error.message);
      console.log('[IPFS Service] –†–∞–±–æ—Ç–∞–µ–º –≤ –º–æ–∫-—Ä–µ–∂–∏–º–µ');
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ IPFS (HTTP API –∫–∞–∫ –≤ reference –∫–æ–¥–µ)
  async uploadFile(filePath, options = {}) {
    // –î–æ–∂–∏–¥–∞–µ–º—Å—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Pinata (–≤–∞–∂–Ω–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞)
    await this.ready;
    try {
      if (!this.isConnected) {
        return this.mockUploadFile(filePath, options);
      }

      const fileName = options.name || path.basename(filePath);

      // –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (SDK –ø—Ä–∏–Ω–∏–º–∞–µ—Ç pinataMetadata –æ—Ç–¥–µ–ª—å–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º)
      const pinataMetadata = {
        name: fileName,
        keyvalues: {
          uploadTimestamp: new Date().toISOString(),
          originalName: fileName,
          ...options.metadata || {}
        }
      };

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Pinata SDK (–Ω–∞–¥—ë–∂–Ω–µ–µ, —á–µ–º raw HTTP)
      const readableStream = require('fs').createReadStream(filePath);

      const result = await this.pinata.pinFileToIPFS(readableStream, {
        pinataMetadata
      });

      console.log(`[IPFS Service] ‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${fileName}, CID: ${result.IpfsHash}`);

      return {
        success: true,
        ipfsHash: result.IpfsHash,
        ipfsUri: `ipfs://${result.IpfsHash}`,
        gatewayUrl: this.getGatewayUrl(result.IpfsHash),
        size: result.PinSize || null,
        timestamp: result.Timestamp || new Date().toISOString()
      };
      
    } catch (error) {
      console.error('[IPFS Service] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
      throw new Error(`IPFS upload failed: ${error.message}`);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ JSON –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ IPFS
  async uploadJSON(jsonObject, options = {}) {
    // –î–æ–∂–∏–¥–∞–µ–º—Å—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Pinata
    await this.ready;
    try {
      if (!this.isConnected) {
        return this.mockUploadJSON(jsonObject, options);
      }

      const pinataMetadata = {
        name: options.name || `metadata-${Date.now()}.json`,
        keyvalues: {
          uploadTimestamp: new Date().toISOString(),
          type: 'metadata',
          ...options.metadata || {}
        }
      };

      const result = await this.pinata.pinJSONToIPFS(jsonObject, {
        pinataMetadata,
        pinataOptions: { cidVersion: 0 }
      });

      console.log(`[IPFS Service] ‚úÖ JSON –∑–∞–≥—Ä—É–∂–µ–Ω, CID: ${result.IpfsHash}`);
      
      return {
        success: true,
        ipfsHash: result.IpfsHash,
        ipfsUri: `ipfs://${result.IpfsHash}`,
        gatewayUrl: this.getGatewayUrl(result.IpfsHash),
        size: result.PinSize,
        timestamp: result.Timestamp
      };
      
    } catch (error) {
      console.error('[IPFS Service] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON:', error);
      throw new Error(`IPFS JSON upload failed: ${error.message}`);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ URL gateway
  getGatewayUrl(ipfsHash) {
    const gateway = process.env.DEDICATED_PINATA_GATEWAY;
    
    if (gateway) {
      return `${gateway}/ipfs/${ipfsHash}`;
    }
    
    return `https://gateway.pinata.cloud/ipfs/${ipfsHash}`;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
  getServiceStatus() {
    return {
      connected: this.isConnected,
      provider: this.isConnected ? 'Pinata IPFS (HTTP API)' : 'Mock IPFS',
      gateway: this.getGatewayUrl(''),
      authenticated: this.isConnected
    };
  }

  // –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
  async uploadMultipleFiles(files, options = {}) {
    const results = [];
    const errors = [];

    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      
      try {
        console.log(`[IPFS Service] –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ ${i + 1}/${files.length}: ${file.originalname}`);
        
        const fileOptions = {
          name: file.originalname,
          metadata: {
            originalName: file.originalname,
            mimetype: file.mimetype,
            uploadBatch: options.batchId || Date.now()
          }
        };
        
        const result = await this.uploadFile(file.path, fileOptions);
        
        results.push({
          filename: file.originalname,
          mimetype: file.mimetype,
          size: file.size,
          ...result
        });
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        if (i < files.length - 1) {
          await this.sleep(500);
        }
        
      } catch (error) {
        console.error(`[IPFS Service] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${file.originalname}:`, error.message);
        
        errors.push({
          filename: file.originalname,
          error: error.message
        });
      }
    }

    return {
      successful: results,
      failed: errors,
      totalFiles: files.length,
      successCount: results.length,
      errorCount: errors.length
    };
  }

  // –ú–æ–∫-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö credentials
  mockUploadFile(filePath, options = {}) {
    const mockHash = `QmMock${Math.random().toString(36).substring(2, 15)}${Math.random().toString(36).substring(2, 15)}`;
    
    console.log(`[IPFS Service] üîÑ Mock upload: ${path.basename(filePath)} -> ${mockHash}`);
    
    return {
      success: true,
      ipfsHash: mockHash,
      ipfsUri: `ipfs://${mockHash}`,
      gatewayUrl: this.getGatewayUrl(mockHash),
      size: Math.floor(Math.random() * 1000000), // –°–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–º–µ—Ä
      timestamp: new Date().toISOString(),
      mock: true
    };
  }

  mockUploadJSON(jsonObject, options = {}) {
    const mockHash = `QmMockJSON${Math.random().toString(36).substring(2, 12)}`;
    
    console.log(`[IPFS Service] üîÑ Mock JSON upload -> ${mockHash}`);
    
    return {
      success: true,
      ipfsHash: mockHash,
      ipfsUri: `ipfs://${mockHash}`,
      gatewayUrl: this.getGatewayUrl(mockHash),
      size: JSON.stringify(jsonObject).length,
      timestamp: new Date().toISOString(),
      mock: true
    };
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  async cleanupTempFile(filePath) {
    try {
      await fs.unlink(filePath);
      console.log(`[IPFS Service] üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: ${filePath}`);
    } catch (error) {
      console.warn(`[IPFS Service] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª ${filePath}:`, error.message);
    }
  }
}

module.exports = IPFSService; 