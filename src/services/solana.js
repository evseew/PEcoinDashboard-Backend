// services/solana.js
// –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ reference/mint_nft_stable.js
const { createUmi } = require("@metaplex-foundation/umi-bundle-defaults");
const bubblegum = require("@metaplex-foundation/mpl-bubblegum");
const { keypairIdentity, publicKey } = require("@metaplex-foundation/umi");
const bs58 = require("bs58");
const { setComputeUnitLimit, setComputeUnitPrice, mplToolbox } = require("@metaplex-foundation/mpl-toolbox");

// ‚úÖ –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è leaf index
let findLeafAssetIdPda;
try {
  findLeafAssetIdPda = require("@metaplex-foundation/mpl-bubblegum").findLeafAssetIdPda;
  console.log('[Solana Service] ‚úÖ findLeafAssetIdPda –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
} catch (error) {
  console.error('[Solana Service] ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ findLeafAssetIdPda:', error.message);
  console.log('[Solana Service] ‚ö†Ô∏è Asset ID —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
}

class SolanaService {
  constructor() {
    this.umi = null;
    this.initialized = false;
    this.umiInstanceCache = {};
  }
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ (–∏–∑ reference –∫–æ–¥–∞)
  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ UMI instance —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ reference)
  async createUmiInstanceWithConfirm(url) {
    if (this.umiInstanceCache[url]) {
      return this.umiInstanceCache[url];
    }

    console.log(`[Solana Service] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Umi –¥–ª—è: ${url}`);
    const umi = createUmi(url, {
      httpOptions: { 
        fetchMiddleware: (req, next) => next(req),
        timeout: 15000 // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      }
    });

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ (–∏–∑ reference)
    try {
      const payerPrivateKey = process.env.PRIVATE_KEY;
      if (!payerPrivateKey) {
        throw new Error('PRIVATE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      }
      
      const secretKeyBytes = bs58.decode(payerPrivateKey);
      const umiKeypair = umi.eddsa.createKeypairFromSecretKey(secretKeyBytes);
      umi.use(keypairIdentity(umiKeypair));
      console.log(`[Solana Service] –ö–æ—à–µ–ª–µ–∫ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω: ${umi.identity.publicKey}`);
    } catch (e) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: ${e.message}`);
    }

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Bubblegum –∏ Toolbox (–∏–∑ reference)
    umi.use(bubblegum.mplBubblegum());
    umi.use(mplToolbox());
    console.log("[Solana Service] Bubblegum –∏ mplToolbox –ø–æ–¥–∫–ª—é—á–µ–Ω—ã");

    this.umiInstanceCache[url] = umi;
    return umi;
  }
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RPC —Å fallback (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ reference)
  async connectToRpc() {
    const MAIN_RPC_URL = process.env.RPC_URL || "https://api.mainnet-beta.solana.com";
    const BACKUP_RPC_URLS = process.env.BACKUP_RPC_URLS
      ? process.env.BACKUP_RPC_URLS.split(',')
      : [
          "https://solana-api.projectserum.com",
          "https://rpc.ankr.com/solana"
        ];
    
    const rpcUrls = [MAIN_RPC_URL, ...BACKUP_RPC_URLS].filter(url => url && url.trim());
    
    console.log("\n[Solana Service] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana RPC...");
    console.log(`[Solana Service] –°–ø–∏—Å–æ–∫ RPC –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${rpcUrls.join(', ')}`);
    
    let lastError = null;
    
    for (const url of rpcUrls) {
      console.log(`[Solana Service] –ü—Ä–æ–±—É–µ–º: ${url}`);
      try {
        const tempUmi = await this.createUmiInstanceWithConfirm(url);
        
        // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        console.log(`[Solana Service] –°–æ–∑–¥–∞–Ω UMI instance –¥–ª—è ${url}, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å...`);
        const blockHash = await Promise.race([
          tempUmi.rpc.getLatestBlockhash(),
          new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Timeout 10s')), 10000)
          )
        ]);
        
        console.log(`[Solana Service] ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫: ${url}`);
        console.log(`[Solana Service] Blockhash —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω`);
        this.umi = tempUmi;
        return this.umi;
        
      } catch (e) {
        lastError = e;
        console.warn(`[Solana Service] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${url}:`);
        console.warn(`[Solana Service]    –¢–∏–ø –æ—à–∏–±–∫–∏: ${e.constructor.name}`);
        console.warn(`[Solana Service]    –°–æ–æ–±—â–µ–Ω–∏–µ: ${e.message}`);
        console.warn(`[Solana Service]    Stack: ${e.stack?.split('\n')[0]}`);
      }
    }
    
    console.error(`[Solana Service] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É RPC –∏–∑ ${rpcUrls.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤`);
    console.error(`[Solana Service] –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:`, lastError);
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É RPC-—ç–Ω–¥–ø–æ–∏–Ω—Ç—É. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${lastError?.message}`);
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
  async initialize() {
    if (this.initialized) return this.umi;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!process.env.PRIVATE_KEY) {
      console.warn("[Solana Service] PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–µ—Ä–≤–∏—Å –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
      return null;
    }
    
    try {
      await this.connectToRpc();
      this.initialized = true;
      console.log("[Solana Service] –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
      return this.umi;
    } catch (error) {
      console.error("[Solana Service] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error.message);
      throw error;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
  isReady() {
    return this.initialized && this.umi !== null;
  }
  
  // –ú–∏–Ω—Ç –æ–¥–Ω–æ–≥–æ NFT (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ reference –ª–æ–≥–∏–∫–∏)
  async mintSingleNFT(params) {
    const { 
      treeAddress, 
      collectionAddress, 
      recipient, 
      metadata, 
      maxAttempts = 3 
    } = params;
    
    if (!this.isReady()) {
      await this.initialize();
    }
    
    if (!this.isReady()) {
      throw new Error("Solana service –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
    }
    
    console.log(`[Solana Service] –ù–∞—á–∞–ª–æ –º–∏–Ω—Ç–∏–Ω–≥–∞ NFT: ${metadata.name}`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–∏–∑ reference)
    const metadataArgs = {
      name: metadata.name || "Unnamed NFT",
      symbol: metadata.symbol || "cNFT",
      uri: metadata.uri,
      sellerFeeBasisPoints: metadata.sellerFeeBasisPoints || 0,
      collection: { 
        key: publicKey(collectionAddress), 
        verified: true // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: cNFT –î–û–õ–ñ–ù–´ –ë–´–¢–¨ verified –¥–ª—è Phantom!
      },
      creators: metadata.creators || [
        { 
          address: this.umi.identity.publicKey, 
          share: 100, 
          verified: true 
        }
      ],
    };
    
    // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º creators —Å JSON –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    console.log('[Solana Service] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ creators:', {
      fromMetadata: metadata.creators,
      fallback: metadataArgs.creators,
      identityKey: this.umi.identity.publicKey.toString()
    });
    
    // –í–ê–ñ–ù–û: –ï—Å–ª–∏ –µ—Å—Ç—å creators –≤ metadata, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö!
    if (metadata.creators && Array.isArray(metadata.creators) && metadata.creators.length > 0) {
      console.log('[Solana Service] ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º creators –∏–∑ metadata');
      metadataArgs.creators = metadata.creators.map(creator => ({
        address: typeof creator.address === 'string' ? creator.address : this.umi.identity.publicKey,
        share: creator.share || 100,
        verified: true // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º verified –ø—Ä–∏ –º–∏–Ω—Ç–∏–Ω–≥–µ
      }));
    } else {
      console.log('[Solana Service] ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback creators');
    }
    
    // –ü–æ–ø—ã—Ç–∫–∏ –º–∏–Ω—Ç–∏–Ω–≥–∞ —Å retry –ª–æ–≥–∏–∫–æ–π (–∏–∑ reference)
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      console.log(`[Solana Service] –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts}`);
      
      try {
        const txStartTime = Date.now();
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –º–∏–Ω—Ç–∏–Ω–≥–∞ compressed NFT (–∏–∑ reference)
        const mintInstruction = bubblegum.mintToCollectionV1(this.umi, {
          leafOwner: publicKey(recipient),
          merkleTree: publicKey(treeAddress),
          collectionMint: publicKey(collectionAddress),
          metadata: metadataArgs,
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–∏–∑ reference HTTP-only –ø–æ–¥—Ö–æ–¥–∞)
        const signature = await mintInstruction.send(this.umi, {
          skipPreflight: false
        });
        
        console.log(`[Solana Service] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${bs58.encode(signature)}`);
        
        // HTTP polling –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–∏–∑ reference)
        let confirmed = false;
        let attempts = 0;
        const maxConfirmAttempts = 30; // 30 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 3 —Å–µ–∫—É–Ω–¥—ã = 90 —Å–µ–∫—É–Ω–¥
        
        while (!confirmed && attempts < maxConfirmAttempts) {
          await this.sleep(3000);
          attempts++;
          
          try {
            const status = await this.umi.rpc.getSignatureStatuses([signature]);
            const txStatus = Array.isArray(status) ? status[0] : status.value?.[0];
            
            if (txStatus) {
              if (txStatus.err || txStatus.error) {
                throw new Error(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: ${JSON.stringify(txStatus.err || txStatus.error)}`);
              }
              
              const isConfirmed = (txStatus.commitment === 'confirmed' || txStatus.commitment === 'finalized') ||
                                (txStatus.confirmationStatus === 'confirmed' || txStatus.confirmationStatus === 'finalized');
              
              if (isConfirmed) {
                confirmed = true;
                console.log(`[Solana Service] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ (${txStatus.commitment || txStatus.confirmationStatus})`);
              }
            }
          } catch (pollError) {
            console.log(`[Solana Service] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: ${pollError.message}`);
          }
        }
        
        if (!confirmed) {
          throw new Error(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∑–∞ ${maxConfirmAttempts * 3} —Å–µ–∫—É–Ω–¥`);
        }
        
        const elapsedTime = (Date.now() - txStartTime) / 1000;
        console.log(`[Solana Service] ‚úÖ –ú–∏–Ω—Ç —É—Å–ø–µ—à–µ–Ω –∑–∞ ${elapsedTime} —Å–µ–∫—É–Ω–¥`);
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è leaf index —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        let leafIndex = null;
        let assetId = null;
        let dasStatus = null;
        
        try {
          console.log(`[Solana Service] üîç –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å leaf index –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...`);
          leafIndex = await this.extractLeafIndexFromTransaction(bs58.encode(signature), treeAddress);
          
          if (leafIndex !== null) {
            console.log(`[Solana Service] üîç –§–æ—Ä–º–∏—Ä—É–µ–º asset ID –¥–ª—è leaf index ${leafIndex}...`);
            assetId = await this.deriveAssetId(treeAddress, leafIndex);
            
            // ‚úÖ –ù–û–í–û–ï: –ó–∞–ø—É—Å–∫–∞–µ–º DAS –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
            if (assetId) {
              console.log(`[Solana Service] üî¨ –ó–∞–ø—É—Å–∫–∞–µ–º DAS –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–ª—è asset ID: ${assetId}`);
              dasStatus = await this.performCompressedNFTDiagnostics(assetId, treeAddress, leafIndex);
            }
          }
        } catch (leafError) {
          console.warn(`[Solana Service] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å leaf index: ${leafError.message}`);
          console.log(`[Solana Service] ‚ÑπÔ∏è –ú–∏–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω—ã–º, –Ω–æ –±–µ–∑ leaf index –∏ asset ID`);
        }

        const result = {
          success: true,
          signature: bs58.encode(signature),
          elapsedTime
        };

        // –î–æ–±–∞–≤–ª—è–µ–º leaf index –∏ asset ID —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã
        if (leafIndex !== null) {
          result.leafIndex = leafIndex;
          console.log(`[Solana Service] ‚úÖ Leaf index –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${leafIndex}`);
        }

        if (assetId !== null) {
          result.assetId = assetId;
          console.log(`[Solana Service] ‚úÖ Asset ID –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${assetId}`);
        }

        // ‚úÖ –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã DAS –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if (dasStatus) {
          result.dasStatus = dasStatus;
          result.phantomReady = dasStatus.summary?.phantomReady || false;
          result.indexingStatus = dasStatus.checks?.dasIndexed ? 'completed' : 'pending';
          result.recommendations = dasStatus.summary?.recommendations || [];
          
          console.log(`[Solana Service] üìä DAS –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`);
          console.log(`   - Phantom –≥–æ—Ç–æ–≤: ${result.phantomReady}`);
          console.log(`   - –°—Ç–∞—Ç—É—Å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: ${result.indexingStatus}`);
          
          if (result.recommendations.length > 0) {
            console.log(`   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:`, result.recommendations);
          }
        }

        return result;
        
      } catch (mintError) {
        console.error(`[Solana Service] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ ${attempt}: ${mintError.message}`);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ (–∏–∑ reference)
        const alreadyExists = mintError.message.includes('Leaf already exists');
        if (alreadyExists) {
          console.warn("[Solana Service] NFT —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º");
          return {
            success: true,
            signature: null,
            alreadyExists: true
          };
        }
        
        // Rate limiting (–∏–∑ reference)
        if (mintError.message.includes('429') && attempt < maxAttempts) {
          const delay = Math.pow(2, attempt) * 1000;
          console.warn(`[Solana Service] Rate limit, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay / 1000} —Å–µ–∫`);
          await this.sleep(delay);
          continue;
        }
        
        // Blockhash –æ—à–∏–±–∫–∏ (–∏–∑ reference)
        if (mintError.message.includes('Blockhash not found') && attempt < maxAttempts) {
          console.warn("[Solana Service] Blockhash –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 1 —Å–µ–∫");
          await this.sleep(1000);
          continue;
        }
        
        // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
        if (attempt === maxAttempts) {
          throw mintError;
        }
        
        // –û–±—ã—á–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        await this.sleep(7000);
      }
    }
    
    throw new Error("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –º–∏–Ω—Ç–∏–Ω–≥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã");
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
  async getWalletBalance() {
    if (!this.isReady()) {
      await this.initialize();
    }
    
    if (!this.isReady()) {
      throw new Error("Solana service –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
    }
    
    const balance = await this.umi.rpc.getBalance(this.umi.identity.publicKey);
    return balance.basisPoints / 1e9; // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ SOL
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–æ–≤
  isValidSolanaAddress(address) {
    try {
      publicKey(address);
      return true;
    } catch {
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
  async checkWalletBalance() {
    try {
      const balance = await this.umi.rpc.getBalance(this.umi.identity.publicKey);
      const solBalance = balance.basisPoints / 1e9; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ SOL
      
      const balanceInfo = {
        balance: solBalance,
        lamports: balance.basisPoints,
        address: this.umi.identity.publicKey.toString(),
        timestamp: new Date().toISOString()
      };
      
      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ
      if (solBalance < 1) {
        console.warn(`‚ö†Ô∏è –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: ${solBalance.toFixed(4)} SOL`);
        console.warn(`üìç –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: ${this.umi.identity.publicKey.toString()}`);
      } else if (solBalance < 5) {
        console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: ${solBalance.toFixed(4)} SOL (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å)`);
      } else {
        console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: ${solBalance.toFixed(4)} SOL`);
      }
      
      return balanceInfo;
      
    } catch (error) {
      console.error('[Solana Service] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞:', error.message);
      throw new Error(`Failed to check wallet balance: ${error.message}`);
    }
  }

  // –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–∏–Ω—Ç–∏–Ω–≥–∞
  async estimateMintCost(itemCount = 1) {
    try {
      // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å compressed NFT –º–∏–Ω—Ç–∏–Ω–≥–∞
      const baseFee = 0.00025; // SOL –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const perItemFee = 0.0001; // SOL –∑–∞ –∫–∞–∂–¥—ã–π NFT
      
      const estimatedCost = baseFee + (perItemFee * itemCount);
      
      return {
        estimatedCost,
        itemCount,
        baseFee,
        perItemFee,
        currency: 'SOL'
      };
      
    } catch (error) {
      console.error('[Solana Service] –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:', error.message);
      return {
        estimatedCost: 0.001 * itemCount, // Fallback –æ—Ü–µ–Ω–∫–∞
        itemCount,
        currency: 'SOL',
        error: error.message
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
  async canAffordOperation(itemCount = 1) {
    try {
      const balanceInfo = await this.checkWalletBalance();
      const costEstimate = await this.estimateMintCost(itemCount);
      
      const canAfford = balanceInfo.balance >= costEstimate.estimatedCost;
      const remainingBalance = balanceInfo.balance - costEstimate.estimatedCost;
      
      return {
        canAfford,
        currentBalance: balanceInfo.balance,
        estimatedCost: costEstimate.estimatedCost,
        remainingBalance: Math.max(0, remainingBalance),
        itemCount,
        warning: remainingBalance < 1 ? '–ë–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –Ω–∏–∑–∫–∏–º –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏' : null
      };
      
    } catch (error) {
      console.error('[Solana Service] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏:', error.message);
      return {
        canAfford: false,
        error: error.message
      };
    }
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏
  async logTransaction(signature, itemCount, actualCost = null) {
    try {
      const costEstimate = await this.estimateMintCost(itemCount);
      const cost = actualCost || costEstimate.estimatedCost;
      
      console.log(`üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:`);
      console.log(`   Signature: ${signature}`);
      console.log(`   Items: ${itemCount}`);
      console.log(`   Cost: ~${cost.toFixed(6)} SOL`);
      console.log(`   Explorer: https://explorer.solana.com/tx/${signature}`);
      
      return {
        signature,
        itemCount,
        cost,
        timestamp: new Date().toISOString(),
        explorerUrl: `https://explorer.solana.com/tx/${signature}`
      };
      
    } catch (error) {
      console.error('[Solana Service] –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error.message);
    }
  }

  // ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ leaf index –∏–∑ transaction logs
  async extractLeafIndexFromTransaction(signature, treeAddress) {
    try {
      console.log(`[Solana Service] –ò–∑–≤–ª–µ–∫–∞–µ–º leaf index –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${signature}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º commitment
      const transactionDetails = await this.umi.rpc.getTransaction(signature, {
        commitment: 'finalized',
        maxSupportedTransactionVersion: 0
      });

      if (!transactionDetails) {
        throw new Error('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      // –ò—â–µ–º –≤ –ª–æ–≥–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã Bubblegum
      const bubblegumProgramId = bubblegum.MPL_BUBBLEGUM_PROGRAM_ID.toString();
      
      for (const instruction of transactionDetails.transaction.message.instructions || []) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
        if (instruction.programId && instruction.programId.toString() === bubblegumProgramId) {
          
          // –ò—â–µ–º –≤ inner instructions (–≥–¥–µ –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è leaf –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
          if (transactionDetails.meta && transactionDetails.meta.innerInstructions) {
            for (const innerInstruction of transactionDetails.meta.innerInstructions) {
              for (const inner of innerInstruction.instructions) {
                if (inner.programId && inner.programId.toString() === bubblegumProgramId) {
                  
                  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º data –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ leaf index
                  if (inner.data) {
                    const leafIndex = this.parseLeafIndexFromInstructionData(inner.data);
                    if (leafIndex !== null) {
                      console.log(`[Solana Service] ‚úÖ Leaf index –Ω–∞–π–¥–µ–Ω: ${leafIndex}`);
                      return leafIndex;
                    }
                  }
                }
              }
            }
          }
        }
      }

      // ‚úÖ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ú–ï–¢–û–î: –ò—â–µ–º –≤ –ª–æ–≥–∞—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      if (transactionDetails.meta && transactionDetails.meta.logMessages) {
        for (const log of transactionDetails.meta.logMessages) {
          // –ò—â–µ–º log message —Å leaf index –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
          const leafIndexMatch = log.match(/leaf.*index[:\s]+(\d+)/i);
          if (leafIndexMatch) {
            const leafIndex = parseInt(leafIndexMatch[1]);
            console.log(`[Solana Service] ‚úÖ Leaf index –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–≥–∞—Ö: ${leafIndex}`);
            return leafIndex;
          }

          // –ò—â–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
          const leafMatch = log.match(/Leaf\s+(\d+)/i);
          if (leafMatch) {
            const leafIndex = parseInt(leafMatch[1]);
            console.log(`[Solana Service] ‚úÖ Leaf index –Ω–∞–π–¥–µ–Ω (—Ñ–æ—Ä–º–∞—Ç 2): ${leafIndex}`);
            return leafIndex;
          }
        }
      }

      // ‚úÖ –ú–ï–¢–û–î 3: –ó–∞–ø—Ä–æ—Å –∫ tree account –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ leaf index
      console.log(`[Solana Service] ‚ö†Ô∏è Leaf index –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–≥–∞—Ö, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º tree state`);
      const leafIndex = await this.getNextLeafIndexFromTree(treeAddress);
      
      if (leafIndex !== null) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π index (—Ç–∞–∫ –∫–∞–∫ –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–º–∏–Ω—Ç–∏–ª–∏)
        const actualLeafIndex = Math.max(0, leafIndex - 1);
        console.log(`[Solana Service] ‚úÖ Leaf index –≤—ã—á–∏—Å–ª–µ–Ω –∏–∑ tree state: ${actualLeafIndex}`);
        return actualLeafIndex;
      }

      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å leaf index –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º');
      
    } catch (error) {
      console.error('[Solana Service] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è leaf index:', error.message);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å leaf index: ${error.message}`);
    }
  }

  // ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–∞—Ä—Å–∏–Ω–≥ leaf index –∏–∑ instruction data
  parseLeafIndexFromInstructionData(instructionData) {
    try {
      // instructionData –æ–±—ã—á–Ω–æ –≤ base58 –∏–ª–∏ base64
      let data;
      
      if (typeof instructionData === 'string') {
        try {
          data = bs58.decode(instructionData);
        } catch {
          try {
            data = Buffer.from(instructionData, 'base64');
          } catch {
            return null;
          }
        }
      } else if (Buffer.isBuffer(instructionData)) {
        data = instructionData;
      } else {
        return null;
      }

      // –î–ª—è bubblegum mint instruction, leaf index –æ–±—ã—á–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
      // –≠—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã instruction data
      if (data.length >= 4) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ leaf index
        const positions = [4, 8, 12, 16, 20, 24];
        
        for (const pos of positions) {
          if (data.length >= pos + 4) {
            const leafIndex = data.readUInt32LE(pos);
            // –í–∞–ª–∏–¥–Ω—ã–π leaf index –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º —á–∏—Å–ª–æ–º
            if (leafIndex >= 0 && leafIndex < 1000000) {
              return leafIndex;
            }
          }
        }
      }

      return null;
    } catch (error) {
      console.warn('[Solana Service] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ instruction data:', error.message);
      return null;
    }
  }

  // ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ leaf index –∏–∑ tree account
  async getNextLeafIndexFromTree(treeAddress) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º account data –¥–ª—è merkle tree
      const treeAccount = await this.umi.rpc.getAccount(publicKey(treeAddress));
      
      if (!treeAccount.exists) {
        throw new Error('Tree account –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ tree account –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è next_leaf_index
      // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ account data –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã spl-account-compression
      const data = treeAccount.data;
      
      if (data.length >= 8) {
        // next_leaf_index –æ–±—ã—á–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ account data
        const nextLeafIndex = Number(data.readBigUInt64LE(0));
        return nextLeafIndex;
      }

      return null;
    } catch (error) {
      console.warn('[Solana Service] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è leaf index –∏–∑ tree:', error.message);
      return null;
    }
  }

  // ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ asset ID –∏–∑ tree address –∏ leaf index
  async deriveAssetId(treeAddress, leafIndex) {
    try {
      if (!findLeafAssetIdPda) {
        // Fallback: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ tree –∏ leaf index
        console.log('[Solana Service] ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥ –¥–ª—è asset ID');
        const deterministicId = this.generateFallbackAssetId(treeAddress, leafIndex);
        return deterministicId;
      }

      const [assetId] = await findLeafAssetIdPda(this.umi, {
        merkleTree: publicKey(treeAddress),
        leafIndex: leafIndex
      });
      
      console.log(`[Solana Service] ‚úÖ Asset ID —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: ${assetId.toString()}`);
      return assetId.toString();
      
    } catch (error) {
      console.error('[Solana Service] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è asset ID:', error.message);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      console.log('[Solana Service] ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
      const fallbackId = this.generateFallbackAssetId(treeAddress, leafIndex);
      return fallbackId;
    }
  }

  // ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: Fallback –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ asset ID
  generateFallbackAssetId(treeAddress, leafIndex) {
    try {
      // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ tree address –∏ leaf index
      // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–µ –∏–¥–µ–∞–ª–µ–Ω, –Ω–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–µ —Ä–∞–±–æ—Ç–∞—Ç—å
      const crypto = require('crypto');
      const input = `${treeAddress}-${leafIndex}`;
      const hash = crypto.createHash('sha256').update(input).digest('hex');
      
      // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 32 —Å–∏–º–≤–æ–ª–∞ hash –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è base58-–ø–æ–¥–æ–±–Ω–æ–≥–æ ID
      const fallbackId = `fallback_${hash.substring(0, 32)}`;
      
      console.log(`[Solana Service] ‚úÖ Fallback Asset ID: ${fallbackId}`);
      return fallbackId;
      
    } catch (error) {
      console.error('[Solana Service] –û—à–∏–±–∫–∞ fallback asset ID:', error.message);
      // –ö—Ä–∞–π–Ω–∏–π fallback
      return `asset_${treeAddress.substring(0, 8)}_${leafIndex}`;
    }
  }

  // ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ NFT —á–µ—Ä–µ–∑ DAS API
  async checkDASIndexing(assetId, maxRetries = 10, delayMs = 5000) {
    try {
      console.log(`[Solana Service] üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é DAS API –¥–ª—è asset: ${assetId}`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Helius DAS API (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ env)
      const dasApiUrl = process.env.DAS_API_URL || process.env.RPC_URL || "https://api.mainnet-beta.solana.com";
      
      for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
          console.log(`[Solana Service] üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –ø—Ä–æ–≤–µ—Ä–∫–∏ DAS –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏`);
          
          const response = await fetch(dasApiUrl, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              jsonrpc: '2.0',
              id: 'check-indexing',
              method: 'getAsset',
              params: {
                id: assetId
              }
            }),
            signal: AbortSignal.timeout(10000) // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
          });

          if (response.ok) {
            const result = await response.json();
            
            if (result.result && result.result.id === assetId) {
              console.log(`[Solana Service] ‚úÖ NFT —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω –≤ DAS API`);
              
              return {
                indexed: true,
                asset: result.result,
                attempt,
                totalTime: attempt * delayMs / 1000
              };
            }
          }
          
          // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∂–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
          if (attempt < maxRetries) {
            console.log(`[Solana Service] ‚è≥ NFT –µ—â–µ –Ω–µ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω, –∂–¥–µ–º ${delayMs/1000}—Å...`);
            await this.sleep(delayMs);
          }
          
        } catch (attemptError) {
          console.warn(`[Solana Service] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ ${attempt}: ${attemptError.message}`);
          
          if (attempt < maxRetries) {
            await this.sleep(delayMs);
          }
        }
      }

      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
      console.warn(`[Solana Service] ‚ö†Ô∏è NFT –Ω–µ –±—ã–ª –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω –∑–∞ ${maxRetries * delayMs / 1000} —Å–µ–∫—É–Ω–¥`);
      
      return {
        indexed: false,
        maxRetries,
        totalWaitTime: maxRetries * delayMs / 1000,
        recommendation: 'NFT –º–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –∫–æ—à–µ–ª—å–∫–µ —á–µ—Ä–µ–∑ 15-30 –º–∏–Ω—É—Ç'
      };
      
    } catch (error) {
      console.error('[Solana Service] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ DAS –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏:', error.message);
      return {
        indexed: false,
        error: error.message
      };
    }
  }

  // ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ asset proof —á–µ—Ä–µ–∑ DAS API
  async getAssetProofFromDAS(assetId) {
    try {
      console.log(`[Solana Service] üìã –ü–æ–ª—É—á–∞–µ–º asset proof –¥–ª—è: ${assetId}`);
      
      const dasApiUrl = process.env.DAS_API_URL || process.env.RPC_URL || "https://api.mainnet-beta.solana.com";
      
      const response = await fetch(dasApiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          jsonrpc: '2.0',
          id: 'get-proof',
          method: 'getAssetProof',
          params: {
            id: assetId
          }
        }),
        signal: AbortSignal.timeout(10000)
      });

      if (response.ok) {
        const result = await response.json();
        
        if (result.result) {
          console.log(`[Solana Service] ‚úÖ Asset proof –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
          return {
            success: true,
            proof: result.result
          };
        }
      }

      throw new Error(`DAS API –Ω–µ –≤–µ—Ä–Ω—É–ª asset proof –¥–ª—è ${assetId}`);
      
    } catch (error) {
      console.error('[Solana Service] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è asset proof:', error.message);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ compressed NFT
  async performCompressedNFTDiagnostics(assetId, treeAddress, leafIndex) {
    try {
      console.log(`[Solana Service] üî¨ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É compressed NFT`);
      
      const diagnostics = {
        assetId,
        treeAddress,
        leafIndex,
        checks: {}
      };

      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ tree account
      try {
        const treeAccount = await this.umi.rpc.getAccount(publicKey(treeAddress));
        diagnostics.checks.treeExists = treeAccount.exists;
        console.log(`[Solana Service] üå≥ Tree account —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${treeAccount.exists}`);
      } catch (error) {
        diagnostics.checks.treeExists = false;
        diagnostics.checks.treeError = error.message;
      }

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ DAS –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
      const dasResult = await this.checkDASIndexing(assetId, 3, 3000); // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
      diagnostics.checks.dasIndexed = dasResult.indexed;
      diagnostics.checks.dasDetails = dasResult;

      // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ asset proof
      const proofResult = await this.getAssetProofFromDAS(assetId);
      diagnostics.checks.assetProofAvailable = proofResult.success;
      diagnostics.checks.proofDetails = proofResult;

      // 4. –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
      diagnostics.summary = {
        mintSuccessful: true,
        phantomReady: diagnostics.checks.dasIndexed && diagnostics.checks.assetProofAvailable,
        estimatedIndexingTime: diagnostics.checks.dasIndexed ? 'Completed' : '15-30 minutes',
        recommendations: []
      };

      if (!diagnostics.checks.dasIndexed) {
        diagnostics.summary.recommendations.push('–ü–æ–¥–æ–∂–¥–∏—Ç–µ 15-30 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏');
        diagnostics.summary.recommendations.push('NFT —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω, –Ω–æ –º–æ–∂–µ—Ç –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∫–æ—à–µ–ª—å–∫–µ');
      }

      if (!diagnostics.checks.assetProofAvailable) {
        diagnostics.summary.recommendations.push('Asset proof –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å DAS API');
      }

      console.log(`[Solana Service] üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, {
        phantomReady: diagnostics.summary.phantomReady,
        dasIndexed: diagnostics.checks.dasIndexed
      });

      return diagnostics;
      
    } catch (error) {
      console.error('[Solana Service] –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
      return {
        assetId,
        error: error.message,
        summary: {
          mintSuccessful: true,
          phantomReady: false,
          estimatedIndexingTime: 'Unknown - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
        }
      };
    }
  }
}

module.exports = SolanaService; 