// services/collections.js
// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏ NFT

const DatabaseService = require('./database');

class CollectionsService {
  constructor() {
    this.collections = new Map();
    this.isInitialized = false;
    this.database = null;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–∑ Supabase
    this.initializeCollections().catch(error => {
      console.error('[Collections Service] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π:', error);
    });
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π –∏–∑ Supabase
  async initializeCollections() {
    try {
      this.database = new DatabaseService();
      
      console.log('[Collections Service] –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–∑ Supabase...');
      const supabaseCollections = await this.database.getCollectionsFromDatabase();
      
      if (supabaseCollections && supabaseCollections.length > 0) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase
        supabaseCollections.forEach(collection => {
          this.collections.set(collection.id, collection);
        });
        console.log(`[Collections Service] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${supabaseCollections.length} –∫–æ–ª–ª–µ–∫—Ü–∏–π –∏–∑ Supabase`);
      } else {
        console.log('[Collections Service] ‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–∑ Supabase –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –Ω–∞–±–æ—Ä');
      }
      
    } catch (error) {
      console.error('[Collections Service] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Supabase:', error);
      console.log('[Collections Service] üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –Ω–∞–±–æ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–π');
    } finally {
      this.isInitialized = true;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
  async waitForInitialization() {
    if (this.isInitialized) return;
    
    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥
    let attempts = 0;
    while (!this.isInitialized && attempts < 100) {
      await new Promise(resolve => setTimeout(resolve, 100));
      attempts++;
    }
    
    if (!this.isInitialized) {
      console.warn('[Collections Service] –¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
  async getCollections(filters = {}) {
    await this.waitForInitialization();
    
    const { status, allowMinting, limit = 50, offset = 0 } = filters;
    
    let collections = Array.from(this.collections.values());
    
    // –§–∏–ª—å—Ç—Ä—ã
    if (status) {
      collections = collections.filter(c => c.status === status);
    }
    
    if (allowMinting !== undefined) {
      collections = collections.filter(c => c.allowMinting === allowMinting);
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
    collections.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
    
    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    const total = collections.length;
    collections = collections.slice(offset, offset + limit);
    
    return {
      collections,
      pagination: {
        total,
        limit,
        offset,
        hasMore: (offset + limit) < total
      }
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ ID
  async getCollection(id) {
    await this.waitForInitialization();
    return this.collections.get(id) || null;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –º–∏–Ω—Ç–∏–Ω–≥–∞
  async getActiveCollections() {
    await this.waitForInitialization();
    return Array.from(this.collections.values())
      .filter(c => c.status === 'active' && c.allowMinting);
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–∏–Ω—Ç–∏–Ω–≥–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  async canMintInCollection(collectionId) {
    await this.waitForInitialization();
    
    const collection = await this.getCollection(collectionId);
    
    if (!collection) {
      return { canMint: false, reason: '–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
    }
    
    if (collection.status !== 'active') {
      return { canMint: false, reason: '–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞' };
    }
    
    if (!collection.allowMinting) {
      return { canMint: false, reason: '–ú–∏–Ω—Ç–∏–Ω–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' };
    }
    
    if (!collection.treeAddress || !collection.collectionAddress) {
      return { canMint: false, reason: '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∞–¥—Ä–µ—Å–∞ –±–ª–æ–∫—á–µ–π–Ω–∞' };
    }
    
    if (collection.maxSupply && collection.totalMinted >= collection.maxSupply) {
      return { canMint: false, reason: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π supply' };
    }
    
    return { canMint: true };
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∏–Ω—Ç–∏–Ω–≥–∞
  async updateMintStats(collectionId, mintedCount) {
    await this.waitForInitialization();
    
    const collection = this.collections.get(collectionId);
    if (collection) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      collection.totalMinted += mintedCount;
      collection.updatedAt = new Date().toISOString();
      this.collections.set(collectionId, collection);
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Supabase –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º collectionId (–∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å UUID) –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Supabase
        await this.database.updateCollectionStats(collectionId, collection.totalMinted);
        console.log(`[Collections Service] ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ${collectionId} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å Supabase`);
      } catch (error) {
        console.error(`[Collections Service] –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è ${collectionId}:`, error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
      }
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é (–±–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
  async createCollection(data) {
    await this.waitForInitialization();
    
    const id = data.id || data.name.toLowerCase().replace(/\s+/g, '-');
    
    const collection = {
      id,
      name: data.name,
      symbol: data.symbol,
      description: data.description || '',
      treeAddress: data.treeAddress || '',
      collectionAddress: data.collectionAddress || '',
      status: 'draft',
      allowMinting: false,
      totalMinted: 0,
      maxSupply: data.maxSupply || 10000,
      createdAt: new Date().toISOString(),
      metadata: {
        image: data.image || '',
        externalUrl: data.externalUrl || '',
        sellerFeeBasisPoints: data.sellerFeeBasisPoints || 0
      }
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –≤ Supabase
    try {
      const savedCollection = await this.database.createCollectionInDatabase(collection);
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Supabase (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è)
      this.collections.set(savedCollection.id, savedCollection);
      return savedCollection;
    } catch (error) {
      console.error('[Collections Service] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ Supabase:', error);
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –∫–∞–∫ fallback
      this.collections.set(id, collection);
      return collection;
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é
  async updateCollection(id, updates) {
    await this.waitForInitialization();
    
    const collection = this.collections.get(id);
    if (!collection) return null;
    
    const updatedCollection = {
      ...collection,
      ...updates,
      id, // ID –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å
      updatedAt: new Date().toISOString()
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –≤ Supabase
    try {
      const savedCollection = await this.database.updateCollectionInDatabase(id, updates);
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Supabase
      this.collections.set(id, savedCollection);
      return savedCollection;
    } catch (error) {
      console.error('[Collections Service] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ Supabase:', error);
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –∫–∞–∫ fallback
      this.collections.set(id, updatedCollection);
      return updatedCollection;
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –º–∏–Ω—Ç–∏–Ω–≥–∞
  validateCollectionForMinting(collection) {
    const errors = [];
    
    if (!collection.treeAddress) {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Tree Address');
    }
    
    if (!collection.collectionAddress) {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Collection Address');
    }
    
    if (!collection.name) {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏');
    }
    
    if (!collection.symbol) {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–∏–º–≤–æ–ª –∫–æ–ª–ª–µ–∫—Ü–∏–∏');
    }
    
    return {
      isValid: errors.length === 0,
      errors
    };
  }
}

module.exports = CollectionsService; 