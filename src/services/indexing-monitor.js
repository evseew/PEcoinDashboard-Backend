// services/indexing-monitor.js
// ‚úÖ –ü–û–õ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê DAS –ò–ù–î–ï–ö–°–ê–¶–ò–ò

const EventEmitter = require('events');

class IndexingMonitorService extends EventEmitter {
  constructor() {
    super();
    this.monitoringJobs = new Map(); // operationId -> job details
    this.completedOperations = new Map(); // cache –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    this.isRunning = false;
    this.intervalMs = 30000; // 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    this.maxRetries = 40; // 20 –º–∏–Ω—É—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–∞–∫—Å–∏–º—É–º
    this.dasApiUrl = process.env.DAS_API_URL || process.env.RPC_URL || "https://api.mainnet-beta.solana.com";
    
    // ‚úÖ –ù–û–í–û–ï: Webhook –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    this.webhookNotifier = null;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    this.stats = {
      totalMonitored: 0,
      successfullyIndexed: 0,
      timeouts: 0,
      errors: 0,
      averageIndexingTime: 0
    };

    // ‚úÖ –ù–û–í–û–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    this.setupWebhookIntegration();
  }

  // ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  setupWebhookIntegration() {
    try {
      const { getWebhookNotifier } = require('./webhook-notifier');
      this.webhookNotifier = getWebhookNotifier();

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      this.on('indexingCompleted', async (data) => {
        if (this.webhookNotifier) {
          await this.webhookNotifier.notifyEvent('indexingCompleted', data);
        }
      });

      this.on('indexingTimeout', async (data) => {
        if (this.webhookNotifier) {
          await this.webhookNotifier.notifyEvent('indexingTimeout', data);
        }
      });

      this.on('indexingError', async (data) => {
        if (this.webhookNotifier) {
          await this.webhookNotifier.notifyEvent('indexingError', data);
        }
      });

      this.on('monitoringStarted', async (data) => {
        if (this.webhookNotifier) {
          await this.webhookNotifier.notifyEvent('monitoringStarted', data);
        }
      });

      console.log('[Indexing Monitor] ‚úÖ Webhook –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');

    } catch (error) {
      console.warn('[Indexing Monitor] ‚ö†Ô∏è Webhook –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error.message);
    }
  }

  // ‚úÖ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ operation
  startMonitoring(operationId, assetId, metadata = {}) {
    if (this.monitoringJobs.has(operationId)) {
      console.log(`[Indexing Monitor] Operation ${operationId} —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è`);
      return;
    }

    const job = {
      operationId,
      assetId,
      startTime: Date.now(),
      attempts: 0,
      status: 'monitoring',
      metadata: {
        treeAddress: metadata.treeAddress,
        leafIndex: metadata.leafIndex,
        collection: metadata.collection,
        nftName: metadata.nftName,
        ...metadata
      },
      history: []
    };

    this.monitoringJobs.set(operationId, job);
    this.stats.totalMonitored++;

    console.log(`[Indexing Monitor] ‚úÖ –ù–∞—á–∞—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ operation ${operationId} –¥–ª—è asset ${assetId}`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
    if (!this.isRunning) {
      this.startAutomaticMonitoring();
    }

    // Emit —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    this.emit('monitoringStarted', {
      operationId,
      assetId,
      timestamp: new Date().toISOString()
    });

    return job;
  }

  // ‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
  stopMonitoring(operationId, reason = 'manual') {
    const job = this.monitoringJobs.get(operationId);
    if (!job) {
      return false;
    }

    job.status = 'stopped';
    job.stopReason = reason;
    job.endTime = Date.now();
    job.totalTime = job.endTime - job.startTime;

    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ completed cache
    this.completedOperations.set(operationId, job);
    this.monitoringJobs.delete(operationId);

    console.log(`[Indexing Monitor] üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ${operationId}: ${reason}`);

    this.emit('monitoringStopped', {
      operationId,
      reason,
      job
    });

    return true;
  }

  // ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–∏–∫–ª
  async startAutomaticMonitoring() {
    if (this.isRunning) {
      return;
    }

    this.isRunning = true;
    console.log(`[Indexing Monitor] üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${this.intervalMs}ms)`);

    this.monitoringInterval = setInterval(async () => {
      await this.performMonitoringCycle();
    }, this.intervalMs);
  }

  // ‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  stopAutomaticMonitoring() {
    if (!this.isRunning) {
      return;
    }

    this.isRunning = false;
    
    if (this.monitoringInterval) {
      clearInterval(this.monitoringInterval);
      this.monitoringInterval = null;
    }

    console.log(`[Indexing Monitor] üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥`);
  }

  // ‚úÖ –¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö jobs
  async performMonitoringCycle() {
    const activeJobs = Array.from(this.monitoringJobs.values());
    
    if (activeJobs.length === 0) {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö jobs
      this.stopAutomaticMonitoring();
      return;
    }

    console.log(`[Indexing Monitor] üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º ${activeJobs.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π`);

    const promises = activeJobs.map(job => this.checkJobIndexing(job));
    await Promise.allSettled(promises);
  }

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ job
  async checkJobIndexing(job) {
    try {
      job.attempts++;
      const attemptStartTime = Date.now();

      console.log(`[Indexing Monitor] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ${job.operationId} (–ø–æ–ø—ã—Ç–∫–∞ ${job.attempts}/${this.maxRetries})`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º DAS –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
      const dasResult = await this.checkDASIndexing(job.assetId);
      
      const attemptResult = {
        attempt: job.attempts,
        timestamp: new Date().toISOString(),
        indexed: dasResult.indexed,
        responseTime: Date.now() - attemptStartTime,
        details: dasResult
      };

      job.history.push(attemptResult);

      if (dasResult.indexed) {
        // ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ!
        await this.handleSuccessfulIndexing(job, dasResult);
      } else if (job.attempts >= this.maxRetries) {
        // ‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        await this.handleIndexingTimeout(job);
      } else {
        // ‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        console.log(`[Indexing Monitor] ‚è≥ ${job.operationId} –µ—â–µ –Ω–µ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω (${job.attempts}/${this.maxRetries})`);
      }

    } catch (error) {
      console.error(`[Indexing Monitor] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${job.operationId}:`, error.message);
      
      job.history.push({
        attempt: job.attempts,
        timestamp: new Date().toISOString(),
        error: error.message,
        indexed: false
      });

      if (job.attempts >= this.maxRetries) {
        await this.handleIndexingError(job, error);
      }
    }
  }

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ DAS –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API
  async checkDASIndexing(assetId) {
    try {
      const response = await fetch(this.dasApiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          jsonrpc: '2.0',
          id: 'indexing-check',
          method: 'getAsset',
          params: {
            id: assetId
          }
        }),
        signal: AbortSignal.timeout(10000) // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });

      if (response.ok) {
        const result = await response.json();
        
        if (result.result && result.result.id === assetId) {
          return {
            indexed: true,
            asset: result.result,
            compression: result.result.compression,
            ownership: result.result.ownership
          };
        }
      }

      return {
        indexed: false,
        httpStatus: response.status,
        error: response.statusText
      };

    } catch (error) {
      return {
        indexed: false,
        error: error.message
      };
    }
  }

  // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
  async handleSuccessfulIndexing(job, dasResult) {
    job.status = 'indexed';
    job.endTime = Date.now();
    job.totalTime = job.endTime - job.startTime;
    job.indexingResult = dasResult;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.stats.successfullyIndexed++;
    this.updateAverageIndexingTime(job.totalTime);

    console.log(`[Indexing Monitor] ‚úÖ ${job.operationId} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω –∑–∞ ${job.totalTime / 1000}—Å`);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É
    this.emit('indexingCompleted', {
      operationId: job.operationId,
      assetId: job.assetId,
      totalTime: job.totalTime,
      attempts: job.attempts,
      result: dasResult
    });

    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    this.stopMonitoring(job.operationId, 'indexed');

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await this.updateOperationInDatabase(job);
  }

  // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
  async handleIndexingTimeout(job) {
    job.status = 'timeout';
    job.endTime = Date.now();
    job.totalTime = job.endTime - job.startTime;

    this.stats.timeouts++;

    console.warn(`[Indexing Monitor] ‚è∞ ${job.operationId} –Ω–µ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω –∑–∞ ${this.maxRetries} –ø–æ–ø—ã—Ç–æ–∫`);

    this.emit('indexingTimeout', {
      operationId: job.operationId,
      assetId: job.assetId,
      totalTime: job.totalTime,
      attempts: job.attempts,
      recommendation: 'NFT –º–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –∫–æ—à–µ–ª—å–∫–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 30-60 –º–∏–Ω—É—Ç'
    });

    this.stopMonitoring(job.operationId, 'timeout');
    await this.updateOperationInDatabase(job);
  }

  // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
  async handleIndexingError(job, error) {
    job.status = 'error';
    job.endTime = Date.now();
    job.totalTime = job.endTime - job.startTime;
    job.error = error.message;

    this.stats.errors++;

    console.error(`[Indexing Monitor] ‚ùå ${job.operationId} –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${error.message}`);

    this.emit('indexingError', {
      operationId: job.operationId,
      assetId: job.assetId,
      error: error.message,
      attempts: job.attempts
    });

    this.stopMonitoring(job.operationId, 'error');
    await this.updateOperationInDatabase(job);
  }

  // ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  async updateOperationInDatabase(job) {
    try {
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å database service
      const { getDatabaseService } = require('./database');
      const databaseService = getDatabaseService();

      await databaseService.updateMintOperation(job.operationId, {
        indexingStatus: job.status,
        indexingHistory: job.history,
        indexingResult: job.indexingResult || null,
        phantomReady: job.status === 'indexed',
        totalIndexingTime: job.totalTime,
        lastChecked: new Date().toISOString()
      });

    } catch (error) {
      console.error(`[Indexing Monitor] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î –¥–ª—è ${job.operationId}:`, error.message);
    }
  }

  // ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  updateAverageIndexingTime(newTime) {
    const totalOperations = this.stats.successfullyIndexed;
    const currentAverage = this.stats.averageIndexingTime;
    
    this.stats.averageIndexingTime = ((currentAverage * (totalOperations - 1)) + newTime) / totalOperations;
  }

  // ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  getMonitoringStats() {
    return {
      ...this.stats,
      activeJobs: this.monitoringJobs.size,
      completedJobs: this.completedOperations.size,
      isRunning: this.isRunning,
      averageIndexingTimeMinutes: Math.round(this.stats.averageIndexingTime / 60000 * 100) / 100
    };
  }

  // ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
  getOperationStatus(operationId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    const activeJob = this.monitoringJobs.get(operationId);
    if (activeJob) {
      return {
        status: 'monitoring',
        ...activeJob,
        elapsed: Date.now() - activeJob.startTime
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
    const completedJob = this.completedOperations.get(operationId);
    if (completedJob) {
      return {
        status: 'completed',
        ...completedJob
      };
    }

    return null;
  }

  // ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  getActiveOperations() {
    return Array.from(this.monitoringJobs.values()).map(job => ({
      operationId: job.operationId,
      assetId: job.assetId,
      status: job.status,
      attempts: job.attempts,
      elapsed: Date.now() - job.startTime,
      metadata: job.metadata
    }));
  }

  // ‚úÖ Graceful shutdown
  async shutdown() {
    console.log(`[Indexing Monitor] üîÑ Graceful shutdown...`);
    
    this.stopAutomaticMonitoring();
    
    // –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ jobs
    const activeJobs = Array.from(this.monitoringJobs.values());
    for (const job of activeJobs) {
      this.stopMonitoring(job.operationId, 'shutdown');
    }

    console.log(`[Indexing Monitor] ‚úÖ Shutdown –∑–∞–≤–µ—Ä—à–µ–Ω`);
  }
}

// Singleton instance
let monitorInstance = null;

function getIndexingMonitor() {
  if (!monitorInstance) {
    monitorInstance = new IndexingMonitorService();
  }
  return monitorInstance;
}

module.exports = {
  IndexingMonitorService,
  getIndexingMonitor
}; 