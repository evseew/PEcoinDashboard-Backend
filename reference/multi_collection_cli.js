#!/usr/bin/env node

// multi_collection_cli.js
// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏

const CollectionManager = require('./collection_manager');
const readline = require('readline');

class MultiCollectionCLI {
  constructor() {
    this.manager = new CollectionManager();
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
  }

  async start() {
    console.log("\nüé® === –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–õ–õ–ï–ö–¶–ò–Ø–ú–ò NFT ===");
    console.log("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏!");
    
    while (true) {
      const action = await this.showMainMenu();
      
      try {
        switch (action) {
          case '1':
            await this.initializeStructure();
            break;
          case '2':
            await this.createNewCollection();
            break;
          case '3':
            await this.runPipeline();
            break;
          case '4':
            await this.resumePipeline();
            break;
          case '5':
            await this.showStatus();
            break;
          case '6':
            await this.listCollections();
            break;
          case '0':
            console.log("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...");
            this.rl.close();
            return;
          default:
            console.log("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
      } catch (error) {
        console.error(`\n‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        console.log("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
        await this.waitForEnter();
      }
    }
  }

  async showMainMenu() {
    console.log("\n" + "=".repeat(50));
    console.log("üéØ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ:");
    console.log("1. üèóÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–ª–ª–µ–∫—Ü–∏–π");
    console.log("2. üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ");
    console.log("3. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏");
    console.log("4. ‚è≠Ô∏è  –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ—Ä–≤–∞–Ω–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω");
    console.log("5. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π");
    console.log("6. üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π");
    console.log("0. üö™ –í—ã—Ö–æ–¥");
    console.log("=".repeat(50));
    
    return new Promise(resolve => {
      this.rl.question("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", resolve);
    });
  }

  async initializeStructure() {
    console.log("\nüèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫...");
    await this.manager.initializeStructure();
    console.log("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∞!");
    await this.waitForEnter();
  }

  async createNewCollection() {
    console.log("\nüÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ");
    
    const collectionId = await this.manager.selectCollectionInteractive();
    if (!collectionId) {
      console.log("‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞");
      return;
    }

    console.log(`\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è "${collectionId}" –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ`);
    console.log("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –∏ –æ–Ω–æ —Å—Ç–æ–∏—Ç SOL –¥–ª—è –≥–∞–∑–∞.");
    
    const confirm = await new Promise(resolve => {
      this.rl.question("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ", resolve);
    });

    if (confirm.toLowerCase() !== 'y' && confirm.toLowerCase() !== 'yes') {
      console.log("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
      return;
    }

    await this.manager.createCollection(collectionId);
    console.log("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ!");
    await this.waitForEnter();
  }

  async runPipeline() {
    console.log("\nüöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞");
    
    const collectionId = await this.manager.selectCollectionInteractive();
    if (!collectionId) {
      console.log("‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const status = await this.manager.getCollectionsStatus();
    const collectionStatus = status.find(s => s.id === collectionId);
    
    if (!collectionStatus.collectionExists) {
      console.log("‚ùå –ê–¥—Ä–µ—Å –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ.");
      return;
    }

    if (!collectionStatus.treeExists) {
      console.log("‚ùå –ê–¥—Ä–µ—Å –¥–µ—Ä–µ–≤–∞ –ú–µ—Ä–∫–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –¥–µ—Ä–µ–≤–æ —á–µ—Ä–µ–∑ create_merkle_tree.js");
      return;
    }

    console.log(`\nüéØ –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: ${collectionId}`);
    console.log("–≠—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –±–∞—Ç—á–∞ –∏ –º–∏–Ω—Ç–∏–Ω–≥ –≤—Å–µ—Ö NFT.");
    
    const confirm = await new Promise(resolve => {
      this.rl.question("–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å? (y/N): ", resolve);
    });

    if (confirm.toLowerCase() !== 'y' && confirm.toLowerCase() !== 'yes') {
      console.log("‚ùå –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω");
      return;
    }

    await this.manager.runPipelineForCollection(collectionId, false);
    console.log("‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!");
    await this.waitForEnter();
  }

  async resumePipeline() {
    console.log("\n‚è≠Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞");
    
    const collectionId = await this.manager.selectCollectionInteractive();
    if (!collectionId) {
      console.log("‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const status = await this.manager.getCollectionsStatus();
    const collectionStatus = status.find(s => s.id === collectionId);
    
    if (!collectionStatus.hasActiveBatch) {
      console.log("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –±–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —ç—Ç–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏");
      return;
    }

    console.log(`\n‚è≠Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: ${collectionId}`);
    console.log("–ë—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –º–∏–Ω—Ç–∏–Ω–≥–∞ —Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.");
    
    const confirm = await new Promise(resolve => {
      this.rl.question("–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å? (y/N): ", resolve);
    });

    if (confirm.toLowerCase() !== 'y' && confirm.toLowerCase() !== 'yes') {
      console.log("‚ùå –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
      return;
    }

    await this.manager.runPipelineForCollection(collectionId, true);
    console.log("‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!");
    await this.waitForEnter();
  }

  async showStatus() {
    console.log("\nüìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π:");
    
    const status = await this.manager.getCollectionsStatus();
    
    console.log("\n" + "=".repeat(80));
    console.log("| –ö–æ–ª–ª–µ–∫—Ü–∏—è                | –°–æ–∑–¥–∞–Ω–∞ | –î–µ—Ä–µ–≤–æ | –ê–∫—Ç–∏–≤–Ω—ã–π –±–∞—Ç—á | –ü—É—Ç—å");
    console.log("|" + "-".repeat(78) + "|");
    
    for (const collection of status) {
      const created = collection.collectionExists ? "‚úÖ" : "‚ùå";
      const tree = collection.treeExists ? "‚úÖ" : "‚ùå";
      const batch = collection.hasActiveBatch ? "üîÑ" : "‚ö™";
      
      console.log(`| ${collection.name.padEnd(24)} | ${created.padEnd(6)} | ${tree.padEnd(5)} | ${batch.padEnd(12)} | ${collection.path}`);
    }
    console.log("=".repeat(80));
    
    console.log("\n–õ–µ–≥–µ–Ω–¥–∞:");
    console.log("‚úÖ - –ì–æ—Ç–æ–≤–æ");
    console.log("‚ùå - –ù–µ —Å–æ–∑–¥–∞–Ω–æ");
    console.log("üîÑ - –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –±–∞—Ç—á");
    console.log("‚ö™ - –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–∞—Ç—á–∞");
    
    await this.waitForEnter();
  }

  async listCollections() {
    console.log("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:");
    this.manager.listCollections();
    await this.waitForEnter();
  }

  async waitForEnter() {
    return new Promise(resolve => {
      this.rl.question("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...", resolve);
    });
  }
}

// –ó–∞–ø—É—Å–∫ CLI –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const cli = new MultiCollectionCLI();
  cli.start().catch(error => {
    console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ CLI:", error);
    process.exit(1);
  });
}

module.exports = MultiCollectionCLI; 