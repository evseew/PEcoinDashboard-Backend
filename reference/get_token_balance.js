const { createUmi } = require("@metaplex-foundation/umi-bundle-defaults");
const { publicKey, some } = require("@metaplex-foundation/umi");
const { findAssociatedTokenPda } = require("@metaplex-foundation/mpl-toolbox");
const { mplToolbox } = require("@metaplex-foundation/mpl-toolbox");
const dotenv = require("dotenv");

dotenv.config();

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const OWNER_ADDRESS = "9zMiCfGLdyKoRiqj7AScLfBKGJPvriqrFemEi3zagUt7"; // –í–∞—à –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
const MINT_ADDRESS = "FDT9EMUytSwaP8GKiKdyv59rRAsT7gAB57wHUPm7wY9r"; // –ê–¥—Ä–µ—Å –º–∏–Ω—Ç–∞ SPL —Ç–æ–∫–µ–Ω–∞

// RPC-—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (–∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö)
const USER_RPC_URL = process.env.RPC_URL; // –í–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π RPC (–Ω–∞–ø—Ä–∏–º–µ—Ä, Alchemy)
const MAIN_RPC_URL = "https://api.mainnet-beta.solana.com"; // –ü—É–±–ª–∏—á–Ω—ã–π RPC
const BACKUP_RPC_URLS = [
  // –î—Ä—É–≥–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ URL, –µ—Å–ª–∏ –µ—Å—Ç—å
].filter(url => url); 

async function getTokenBalance() {
  console.log(`--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞ ---`);
  console.log(`–ö–æ—à–µ–ª–µ–∫: ${OWNER_ADDRESS}`);
  console.log(`–¢–æ–∫–µ–Ω (Mint): ${MINT_ADDRESS}`);

  let umi = null;
  let currentRpcUrl = null; 
  let connectedSuccessfully = false;
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è UMI
  const createUmiInstance = (url) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–ø–æ—á–∫—É –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è .use()
    const umi = createUmi(url, {
      httpOptions: { 
        fetchMiddleware: (req, next) => next(req) 
      } 
    }).use(mplToolbox()); // –ü–æ–¥–∫–ª—é—á–∞–µ–º mplToolbox —Å—Ä–∞–∑—É
    
    // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º confirm (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Ö–æ—Ç—è –∑–¥–µ—Å—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
    umi.rpc.confirm = async (signature, commitment) => {
        const result = await umi.rpc.getSignatureStatuses([signature], { commitment });
        if (result.value[0]?.err) throw new Error(`Transaction failed: ${JSON.stringify(result.value[0].err)}`);
        return signature;
    };
    return umi;
  };

  // –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RPC (–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º USER_RPC_URL)
  const rpcUrlsToTry = [USER_RPC_URL, ...BACKUP_RPC_URLS, MAIN_RPC_URL].filter(url => url);

  for (const rpcUrl of rpcUrlsToTry) {
    currentRpcUrl = rpcUrl;
    console.log(`\nüîÑ –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RPC: ${currentRpcUrl}`);
    umi = createUmiInstance(currentRpcUrl);

    try {
      console.log("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...");
      await umi.rpc.getLatestBlockhash(); 
      console.log("‚úÖ RPC –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!");
      connectedSuccessfully = true;
      break; 
    } catch (e) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${currentRpcUrl}: ${e.message}`);
    }
  }

  if (!connectedSuccessfully) {
    console.error("\n‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É RPC-—ç–Ω–¥–ø–æ–∏–Ω—Ç—É.");
    console.error("   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env —Ñ–∞–π–ª–µ —É–∫–∞–∑–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π RPC URL.");
    return; 
  }

  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ RPC: ${currentRpcUrl}`);

  try {
    const ownerPublicKey = publicKey(OWNER_ADDRESS);
    const mintPublicKey = publicKey(MINT_ADDRESS);

    console.log("\n–ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç (ATA)...");
    
    // –ù–∞—Ö–æ–¥–∏–º –∞–¥—Ä–µ—Å Associated Token Account (ATA)
    // –≠—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–∫–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    const associatedTokenAccountPda = findAssociatedTokenPda(umi, {
        mint: mintPublicKey,
        owner: ownerPublicKey,
    });
    console.log(`–ê–¥—Ä–µ—Å ATA: ${associatedTokenAccountPda}`);

    console.log("\n–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ —Ç–æ–∫–µ–Ω–∞...");
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ –∏–∑ toolbox
    const tokenAccount = await umi.toolbox.accounts.fetchToken(associatedTokenAccountPda); 

    console.log("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–Ω—Ç–µ —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ü–∏–º–∞–ª–æ–≤)...");
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–Ω—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ –∏–∑ toolbox
    const mintAccount = await umi.toolbox.accounts.fetchMint(mintPublicKey);
    const decimals = mintAccount.decimals;
    
    // –ë–∞–ª–∞–Ω—Å —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –µ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ 10^decimals
    const balance = Number(tokenAccount.amount) / (10 ** decimals);

    console.log("\n--- –ë–∞–ª–∞–Ω—Å ---");
    console.log(`–ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞ ${MINT_ADDRESS}`);
    console.log(`–Ω–∞ –∫–æ—à–µ–ª—å–∫–µ ${OWNER_ADDRESS}:`);
    console.log(`‚û°Ô∏è  ${balance}`);
    console.log(`(–î–µ—Ü–∏–º–∞–ª–æ–≤ —É —Ç–æ–∫–µ–Ω–∞: ${decimals})`);

  } catch (error) {
     // –û—Ç–¥–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —Ç–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç –ø—Ä–æ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω
     if (error.message && (error.message.includes("Account not found") || error.message.includes("could not find account"))) {
        console.log("\n--- –ë–∞–ª–∞–Ω—Å ---");
        console.log(`–¢–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç –¥–ª—è ${MINT_ADDRESS} –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ ${OWNER_ADDRESS} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        console.log(`–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω 0.`);
     } else {
        console.error("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞:");
        console.error(error);
     }
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
getTokenBalance().catch(err => {
  console.error("\n–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", err);
}); 