const { createUmi } = require("@metaplex-foundation/umi-bundle-defaults");
const bubblegum = require("@metaplex-foundation/mpl-bubblegum");
const { keypairIdentity, generateSigner } = require("@metaplex-foundation/umi");
const bs58 = require("bs58");
const fs = require("fs");
const path = require("path");
const dotenv = require("dotenv");

dotenv.config();

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const payerPrivateKey = process.env.PRIVATE_KEY;
if (!payerPrivateKey) {
  throw new Error("PRIVATE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env");
}

// –†–µ–∑–µ—Ä–≤–Ω—ã–µ RPC-—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã Solana –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º
const USER_RPC_URL = process.env.RPC_URL;
const MAIN_RPC_URL = "https://api.mainnet-beta.solana.com";
const BACKUP_RPC_URLS = [
  "https://solana-api.projectserum.com",
  "https://rpc.ankr.com/solana",
  USER_RPC_URL,
].filter(url => url);

// –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã NFT
const RECEIVER_ADDRESS = "9zMiCfGLdyKoRiqj7AScLfBKGJPvriqrFemEi3zagUt7";

// –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –¥–µ—Ä–µ–≤–∞ –ú–µ—Ä–∫–ª–∞ –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
const treeAddress = fs.readFileSync("tree_address.txt", "utf8").trim();
const collectionAddress = fs.readFileSync("collection_address.txt", "utf8").trim();

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∞—Å—Å–µ—Ç–∞–º–∏
const ASSET_DIR = "asset";

// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π –∫–∞–∂–¥–æ–≥–æ NFT
const COPIES_PER_NFT = 3;

async function mintNFTs() {
  console.log("--- –ú–∏–Ω—Ç–∏–Ω–≥ —Å–∂–∞—Ç—ã—Ö NFT —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Bubblegum ---");
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RPC
  let umi = null;
  let currentRpcUrl = MAIN_RPC_URL;
  let connectedSuccessfully = false;
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è UMI —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º URL
  const createUmiInstance = (url) => {
    const umi = createUmi(url, {
      httpOptions: { 
        fetchMiddleware: (req, next) => next(req)
      }
    });
    
    // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ confirm, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª WebSocket
    umi.rpc.confirm = async (signature, commitment) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ HTTP
      const result = await umi.rpc.getSignatureStatuses([signature], { commitment });
      if (result.value[0]?.err) {
        throw new Error(`Transaction failed: ${JSON.stringify(result.value[0].err)}`);
      }
      return signature;
    };
    
    return umi;
  };
  
  // –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π RPC
  console.log(`–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É RPC: ${currentRpcUrl}`);
  umi = createUmiInstance(currentRpcUrl);
  
  try {
    console.log("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...");
    const blockhash = await umi.rpc.getLatestBlockhash();
    console.log("‚úÖ RPC –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!");
    connectedSuccessfully = true;
  } catch (e) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${currentRpcUrl}: ${e.message}`);
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É, –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ
    for (const backupUrl of BACKUP_RPC_URLS) {
      currentRpcUrl = backupUrl;
      console.log(`üîÑ –ü—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π RPC: ${currentRpcUrl}`);
      umi = createUmiInstance(currentRpcUrl);
      
      try {
        const blockhash = await umi.rpc.getLatestBlockhash();
        console.log("‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–π RPC —Ä–∞–±–æ—Ç–∞–µ—Ç!");
        connectedSuccessfully = true;
        break; // –ù–∞—à–ª–∏ —Ä–∞–±–æ—Ç–∞—é—â–∏–π RPC, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
      } catch (err) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${currentRpcUrl}: ${err.message}`);
      }
    }
  }
  
  if (!connectedSuccessfully) {
    throw new Error("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É RPC-—ç–Ω–¥–ø–æ–∏–Ω—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.");
  }
  
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ RPC: ${currentRpcUrl}`);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞
  let secretKeyBytes;
  try {
    secretKeyBytes = bs58.decode(payerPrivateKey);
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ base58.");
    throw e;
  }
  const umiKeypair = umi.eddsa.createKeypairFromSecretKey(secretKeyBytes);
  umi.use(keypairIdentity(umiKeypair));
  console.log(`–ü–ª–∞—Ç–µ–ª—å—â–∏–∫: ${umi.identity.publicKey}`);
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã Bubblegum
  umi.use(bubblegum.mplBubblegum());
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –º–∏–Ω—Ç–∏–Ω–≥–∞
  const files = fs.readdirSync(ASSET_DIR);
  const imageFiles = files.filter(
    file => file.endsWith('.png') && file !== 'collection.png'
  );
  
  console.log(`–ù–∞–π–¥–µ–Ω–æ ${imageFiles.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –º–∏–Ω—Ç–∏–Ω–≥–∞`);
  console.log(`–î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ ${COPIES_PER_NFT} NFT`);
  console.log(`–í—Å–µ–≥–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ ${imageFiles.length * COPIES_PER_NFT} NFT`);
  console.log(`–ü–æ–ª—É—á–∞—Ç–µ–ª—å –≤—Å–µ—Ö NFT: ${RECEIVER_ADDRESS}`);
  
  // –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –º–∏–Ω—Ç–æ–≤
  let successfulMints = 0;
  
  // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  for (const imageFile of imageFiles) {
    const baseName = path.basename(imageFile, '.png');
    const jsonFile = `${baseName}.json`;
    const jsonPath = path.join(ASSET_DIR, jsonFile);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ JSON —Ñ–∞–π–ª
    if (!fs.existsSync(jsonPath)) {
      console.log(`‚ö†Ô∏è JSON —Ñ–∞–π–ª –¥–ª—è ${imageFile} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
      continue;
    }
    
    // –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    const jsonContent = fs.readFileSync(jsonPath, 'utf8');
    const metadata = JSON.parse(jsonContent);
    
    console.log(`\n--- –ú–∏–Ω—Ç–∏–Ω–≥ ${baseName} (${COPIES_PER_NFT} –∫–æ–ø–∏–π) ---`);
    
    // –ú–∏–Ω—Ç–∏–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π
    for (let i = 0; i < COPIES_PER_NFT; i++) {
      try {
        console.log(`–ú–∏–Ω—Ç–∏–Ω–≥ ${baseName} - –∫–æ–ø–∏—è ${i+1}/${COPIES_PER_NFT}...`);
        
        // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è NFT
        const nftMetadata = {
          name: metadata.name,
          symbol: metadata.symbol || "PESTICKERS",
          uri: metadata.image, // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å URI –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, –Ω–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º URI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–º–µ—Ä–∞
          sellerFeeBasisPoints: 0, // –ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏
          collection: {
            key: collectionAddress,
            verified: false, // –≠—Ç–æ –±—É–¥–µ—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ
          },
          creators: metadata.properties?.creators || [
            {
              address: umi.identity.publicKey,
              share: 100,
              verified: false,
            },
          ],
        };
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ –º–∏–Ω—Ç–∏–Ω–≥
        const builder = await bubblegum.mintToCollectionV1(umi, {
          leafOwner: RECEIVER_ADDRESS,
          merkleTree: treeAddress,
          metadata: nftMetadata,
          collectionMint: collectionAddress,
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const result = await builder.sendAndConfirm(umi, {
          send: { skipPreflight: true },
          confirm: { strategy: { type: 'blockhash', blockhash: (await umi.rpc.getLatestBlockhash()).blockhash } }
        });
        
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–º–∏–Ω—á–µ–Ω ${baseName} - –∫–æ–ø–∏—è ${i+1}/${COPIES_PER_NFT}`);
        console.log(`   –ü–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${bs58.encode(result.signature)}`);
        successfulMints++;
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –º–∏–Ω—Ç–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ RPC
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–Ω—Ç–∏–Ω–≥–µ ${baseName} - –∫–æ–ø–∏—è ${i+1}/${COPIES_PER_NFT}:`);
        console.error(error.message);
        if (error.logs) {
          console.error("–õ–æ–≥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:");
          error.logs.forEach(log => console.error(log));
        }
      }
    }
  }
  
  console.log(`\n=== –ò—Ç–æ–≥–∏ –º–∏–Ω—Ç–∏–Ω–≥–∞ ===`);
  console.log(`–£—Å–ø–µ—à–Ω–æ –∑–∞–º–∏–Ω—á–µ–Ω–æ: ${successfulMints} NFT`);
  console.log(`–í—Å–µ NFT –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –∫–æ—à–µ–ª–µ–∫: ${RECEIVER_ADDRESS}`);
}

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
mintNFTs().catch(err => {
  console.error("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", err);
}); 