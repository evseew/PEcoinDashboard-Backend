const { createUmi } = require("@metaplex-foundation/umi-bundle-defaults");
const { dasApi } = require("@metaplex-foundation/digital-asset-standard-api");
const { publicKey } = require("@metaplex-foundation/umi");
const dotenv = require("dotenv");

dotenv.config();

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const OWNER_ADDRESS = "9zMiCfGLdyKoRiqj7AScLfBKGJPvriqrFemEi3zagUt7"; // –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

// –†–µ–∑–µ—Ä–≤–Ω—ã–µ RPC-—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã Solana
const USER_RPC_URL = process.env.RPC_URL;
const MAIN_RPC_URL = "https://api.mainnet-beta.solana.com"; // –û—Å–Ω–æ–≤–Ω–æ–π RPC - –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å DAS API
const BACKUP_RPC_URLS = [
  // –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ URL –≤–∞—à–µ–≥–æ RPC, –µ—Å–ª–∏ –æ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Digital Asset Standard API (DAS API)
  // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç Helius, QuickNode, Triton –∏ —Ç.–¥.
  // "YOUR_DAS_API_ENABLED_RPC_URL", 
  // USER_RPC_URL, // –£–±–∏—Ä–∞–µ–º USER_RPC_URL –æ—Ç—Å—é–¥–∞, —Ç.–∫. –æ–Ω –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –ø–µ—Ä–≤—ã–º
].filter(url => url); 

async function getNFTs() {
  console.log(`--- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ NFT –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞: ${OWNER_ADDRESS} ---`);

  let umi = null;
  let currentRpcUrl = null; 
  let connectedSuccessfully = false;
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è UMI —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º URL
  const createUmiInstance = (url) => {
    const umi = createUmi(url, {
      httpOptions: { 
        fetchMiddleware: (req, next) => next(req) 
      } 
    }).use(dasApi()); // –ü–æ–¥–∫–ª—é—á–∞–µ–º Digital Asset Standard API
    
    // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ confirm, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª WebSocket (–∫–∞–∫ –≤ mint_nfts.js)
    umi.rpc.confirm = async (signature, commitment) => {
      const result = await umi.rpc.getSignatureStatuses([signature], { commitment });
      if (result.value[0]?.err) {
        throw new Error(`Transaction failed: ${JSON.stringify(result.value[0].err)}`);
      }
      return signature;
    };
    
    return umi;
  };

  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π RPC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ .env), –∑–∞—Ç–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ, –∑–∞—Ç–µ–º –ø—É–±–ª–∏—á–Ω—ã–π
  const rpcUrlsToTry = [USER_RPC_URL, ...BACKUP_RPC_URLS, MAIN_RPC_URL].filter(url => url); // –î–æ–±–∞–≤–ª—è–µ–º USER_RPC_URL –≤ –Ω–∞—á–∞–ª–æ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º null/undefined

  for (const rpcUrl of rpcUrlsToTry) {
    currentRpcUrl = rpcUrl;
    console.log(`üîÑ –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RPC: ${currentRpcUrl}`);
    umi = createUmiInstance(currentRpcUrl);

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å RPC –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É DAS API (getAssetsByOwner)
      console.log("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É DAS API...");
      // –î–µ–ª–∞–µ–º –ø—Ä–æ–±–Ω—ã–π –≤—ã–∑–æ–≤ —Å –ª–∏–º–∏—Ç–æ–º 1, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö
      await umi.rpc.getAssetsByOwner({ owner: publicKey(OWNER_ADDRESS), limit: 1 }); 
      console.log("‚úÖ RPC —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç DAS API!");
      connectedSuccessfully = true;
      break; // –ù–∞—à–ª–∏ —Ä–∞–±–æ—Ç–∞—é—â–∏–π RPC, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
    } catch (e) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ RPC –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç DAS API (${currentRpcUrl}): ${e.message}`);
      // –û—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑-–∑–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–µ—Ç–æ–¥–∞ getAssetsByOwner
      if (e.message && e.message.includes("Method not found")) {
          console.log(`   (–í–µ—Ä–æ—è—Ç–Ω–æ, —ç—Ç–æ—Ç RPC –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–µ—Ç–æ–¥ getAssetsByOwner)`);
      }
    }
  }

  if (!connectedSuccessfully) {
    console.error("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RPC-—ç–Ω–¥–ø–æ–∏–Ω—Ç—É, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–º—É DAS API.");
    console.error("   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env —Ñ–∞–π–ª–µ —É–∫–∞–∑–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π RPC URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç Alchemy),",); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    console.error("   –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Digital Asset Standard (DAS) API.");
    console.error("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∞–∫–∂–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ URL –≤ –∫–æ–¥–µ, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã."); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    return; // –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
  }

  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ RPC: ${currentRpcUrl}`);

  try {
    console.log("\n–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ NFT...");
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Å—Å–µ—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    // –í–∞–∂–Ω–æ: –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Å–∂–∞—Ç—ã–µ NFT, –Ω–æ –∏ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∞—Å—Å–µ—Ç–æ–≤ (—Ç–æ–∫–µ–Ω—ã –∏ —Ç.–¥.)
    // –ú—ã –±—É–¥–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–∞–ª–∏—á–∏—é 'compression' –≤ –¥–∞–Ω–Ω—ã—Ö.
    const assets = await umi.rpc.getAssetsByOwner({ owner: publicKey(OWNER_ADDRESS) });

    console.log(`\n--- –ù–∞–π–¥–µ–Ω–Ω—ã–µ NFT (—Å–∂–∞—Ç—ã–µ) –¥–ª—è ${OWNER_ADDRESS} ---`);
    
    let compressedNftCount = 0;
    if (assets && assets.items) {
      assets.items.forEach(asset => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞—Å—Å–µ—Ç —Å–∂–∞—Ç—ã–º NFT
        if (asset.compression?.compressed === true && asset.compression.tree) {
          console.log(`- ID: ${asset.id}`); // asset.id —ç—Ç–æ –∏ –µ—Å—Ç—å assetId
          // console.log(`  –ò–º—è: ${asset.content?.metadata?.name || 'N/A'}`); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–º—è
          // console.log(`  –î–µ—Ä–µ–≤–æ: ${asset.compression.tree}`); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–µ—Ä–µ–≤–æ
          compressedNftCount++;
        }
      });
    }

    if (compressedNftCount === 0) {
      console.log("–°–∂–∞—Ç—ã–µ NFT –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
    } else {
       console.log(`\n–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–∂–∞—Ç—ã—Ö NFT: ${compressedNftCount}`);
    }
     console.log(`\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞—Å—Å–µ—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –Ω–µ NFT): ${assets?.total || 0}`);


  } catch (error) {
    console.error("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ NFT:");
    console.error(error);
     if (error.message && error.message.includes("Method not found")) {
          console.error(`\n   –ö–∞–∂–µ—Ç—Å—è, RPC (${currentRpcUrl}) –≤—Å–µ –∂–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–µ—Ç–æ–¥ getAssetsByOwner.`);
          console.error("   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π RPC URL.");
     }
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
getNFTs().catch(err => {
  console.error("\n–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", err);
}); 