// mint_nft.js (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Umi –∏ Bubblegum)
const { createUmi } = require("@metaplex-foundation/umi-bundle-defaults");
const bubblegum = require("@metaplex-foundation/mpl-bubblegum");
const { keypairIdentity, publicKey } = require("@metaplex-foundation/umi");
const bs58 = require("bs58");
const dotenv = require("dotenv");
const fs = require("fs");

dotenv.config();

// --- –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ---
const payerPrivateKey = process.env.PRIVATE_KEY;
if (!payerPrivateKey) {
  throw new Error("PRIVATE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env");
}
// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—à —Ç–µ–∫—É—â–∏–π RPC-—ç–Ω–¥–ø–æ–∏–Ω—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ
const USER_RPC_URL = process.env.RPC_URL;
// –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ RPC-—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã Solana
const MAIN_RPC_URL = "https://api.mainnet-beta.solana.com";
const BACKUP_RPC_URLS = [
  "https://solana-api.projectserum.com",
  "https://rpc.ankr.com/solana",
  USER_RPC_URL, // –≤–∞—à RPC –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
].filter(url => url); // —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ URL

const treeAddressFile = "tree_address.txt";
const collectionAddressFile = "collection_address.txt"; // –§–∞–π–ª —Å –∞–¥—Ä–µ—Å–æ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏
const uriListFile = "uris.txt"; // –§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º URI –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
const copiesPerNft = 3; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ NFT
const receiverAddressStr = "9zMiCfGLdyKoRiqj7AScLfBKGJPvriqrFemEi3zagUt7"; // –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è NFT
const delayBetweenMintsMs = 1000; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –º–∏–Ω—Ç–∞–º–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (1 —Å–µ–∫—É–Ω–¥–∞)

// –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å —Ç–≤–æ–µ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —à–ª—é–∑–∞
const dedicatedPinataGateway = "https://amber-accused-tortoise-973.mypinata.cloud";

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

async function mintCompressedNftCopies() {
  console.log(`--- –ú–∏–Ω—Ç–∏–Ω–≥ ${copiesPerNft} –∫–æ–ø–∏–π –∫–∞–∂–¥–æ–≥–æ —Å–∂–∞—Ç–æ–≥–æ NFT –∏–∑ —Ñ–∞–π–ª–∞ ${uriListFile} ---`);

  // –ß—Ç–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–µ—Ä–µ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞
  let treeAddressStr;
  try {
    treeAddressStr = fs.readFileSync(treeAddressFile, "utf8").trim();
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${treeAddressFile}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.`);
    throw err;
  }
  const treeAddress = publicKey(treeAddressStr);
  console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –î–µ—Ä–µ–≤–æ –ú–µ—Ä–∫–ª–∞: ${treeAddress}`);

  // –ß—Ç–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
  let collectionAddressStr;
  try {
    collectionAddressStr = fs.readFileSync(collectionAddressFile, "utf8").trim();
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${collectionAddressFile}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
    throw err;
  }
  const collectionAddress = publicKey(collectionAddressStr);
  console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é: ${collectionAddress}`);

  // –ß—Ç–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ URI –∏–∑ —Ñ–∞–π–ª–∞
  let nftUris;
  try {
    nftUris = fs.readFileSync(uriListFile, "utf8").split('\n').map(uri => uri.trim()).filter(uri => uri);
    if (nftUris.length === 0) {
      throw new Error(`–§–∞–π–ª ${uriListFile} –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö URI.`);
    }
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ ${uriListFile}.`);
    throw err;
  }
  console.log(`–ù–∞–π–¥–µ–Ω–æ ${nftUris.length} URI –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ ${uriListFile}.`);
  console.log(`–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ ${nftUris.length * copiesPerNft} NFT (${copiesPerNft} –∫–æ–ø–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ URI).`);

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
  const receiverAddress = publicKey(receiverAddressStr);
  console.log(`–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è NFT: ${receiverAddress}`);

  // 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RPC (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ create_merkle_tree.js)
  let umi = null;
  let connectedSuccessfully = false;
  let currentRpcUrl = "";

  const createUmiInstance = (url) => {
    const umi = createUmi(url, {
      httpOptions: { fetchMiddleware: (req, next) => next(req) }
    });
    umi.rpc.confirm = async (signature, commitment) => {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º getSignatureStatuses –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ HTTP
      const result = await umi.rpc.getSignatureStatuses([signature], { commitment });
      let retries = 10; // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
      while (retries > 0 && (!result || !result.value || !result.value[0])) {
           console.log(`   ...–æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (${11 - retries}/10)...`);
           await sleep(2000); // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
           result = await umi.rpc.getSignatureStatuses([signature], { commitment });
           retries--;
      }
      if (!result || !result.value || !result.value[0]) {
          throw new Error(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${bs58.encode(signature)} –Ω–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ø–æ—Å–ª–µ ${10} –ø–æ–ø—ã—Ç–æ–∫.`);
      }
      if (result.value[0].err) {
        throw new Error(`Transaction failed: ${JSON.stringify(result.value[0].err)}`);
      }
      console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${bs58.encode(signature)} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.`);
      return signature;
    };
    return umi;
  };

  // –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É–±–ª–∏—á–Ω—ã–π RPC
  currentRpcUrl = MAIN_RPC_URL;
  console.log(`–ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—É–±–ª–∏—á–Ω–æ–º—É RPC: ${currentRpcUrl}`);
  umi = createUmiInstance(currentRpcUrl);
  try {
    await umi.rpc.getLatestBlockhash();
    console.log("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø—É–±–ª–∏—á–Ω—ã–π RPC —Ä–∞–±–æ—Ç–∞–µ—Ç!");
    connectedSuccessfully = true;
  } catch (e) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—É–±–ª–∏—á–Ω–æ–º—É RPC ${currentRpcUrl}: ${e.message}`);
  }

  // –ü—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ RPC, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
  if (!connectedSuccessfully) {
    for (const backupUrl of BACKUP_RPC_URLS) {
      currentRpcUrl = backupUrl;
      console.log(`üîÑ –ü—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π RPC: ${currentRpcUrl}`);
      umi = createUmiInstance(currentRpcUrl);
      try {
        await umi.rpc.getLatestBlockhash();
        console.log("‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–π RPC —Ä–∞–±–æ—Ç–∞–µ—Ç!");
        connectedSuccessfully = true;
        break;
      } catch (err) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º—É RPC ${currentRpcUrl}: ${err.message}`);
      }
    }
  }

  if (!connectedSuccessfully) {
    throw new Error("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É RPC-—ç–Ω–¥–ø–æ–∏–Ω—Ç—É.");
  }
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ RPC: ${currentRpcUrl}`);

  // 2. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞
  let secretKeyBytes;
  try {
    secretKeyBytes = bs58.decode(payerPrivateKey);
  } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞.");
      throw e;
  }
  const umiKeypair = umi.eddsa.createKeypairFromSecretKey(secretKeyBytes);
  umi.use(keypairIdentity(umiKeypair));
  console.log(`–ü–ª–∞—Ç–µ–ª—å—â–∏–∫: ${umi.identity.publicKey}`);

  // 3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã Bubblegum –∫ Umi
  umi.use(bubblegum.mplBubblegum());

  // --- –ú–∏–Ω—Ç–∏–Ω–≥ ---
  console.log("\n--- –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–∏–Ω—Ç–∏–Ω–≥–∞ (—á–µ—Ä–µ–∑ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —à–ª—é–∑ Pinata) ---");
  let totalMinted = 0;
  let totalErrors = 0;

  for (let i = 0; i < nftUris.length; i++) {
    const currentUri = nftUris[i];
    const cid = currentUri.split('/ipfs/')[1];
    if (!cid) {
        console.error(`  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å CID –∏–∑ URI: ${currentUri}. –ü—Ä–æ–ø—É—Å–∫.`);
        totalErrors += copiesPerNft;
        continue;
    }
    console.log(`\n[${i + 1}/${nftUris.length}] –û–±—Ä–∞–±–æ—Ç–∫–∞ CID: ${cid}`);

    // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ —à–ª—é–∑—É
    if (i > 0) {
        const fetchDelay = 1000; // –£–º–µ–Ω—å—à–∞–µ–º –ø–∞—É–∑—É –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —à–ª—é–∑–∞ (1 —Å–µ–∫—É–Ω–¥–∞)
        console.log(`  –ü–∞—É–∑–∞ ${fetchDelay / 1000} —Å–µ–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º—É —à–ª—é–∑—É...`);
        await sleep(fetchDelay);
    }

    let metadataJson;
    try {
      console.log(`  –ó–∞–ø—Ä–æ—Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —à–ª—é–∑–∞ –¥–ª—è CID ${cid}...`);
      const gatewayUrl = `${dedicatedPinataGateway}/ipfs/${cid}`; // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —à–ª—é–∑–∞
      const response = await fetch(gatewayUrl, {
        headers: {
          // –û—Å—Ç–∞–≤–ª—è–µ–º User-Agent –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
           'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
          // API –∫–ª—é—á–∏ –Ω–µ –Ω—É–∂–Ω—ã
        }
      });

      if (!response.ok) {
        const errorText = await response.text().catch(() => "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞");
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–ª—è dedicated gateway, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
         if (errorText.toLowerCase().includes('<html')) {
            console.error("     –û—Ç–≤–µ—Ç –ø–æ—Ö–æ–∂ –Ω–∞ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.");
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —à–ª—é–∑–∞. –°—Ç–∞—Ç—É—Å: ${response.status}. –ü–æ–ª—É—á–µ–Ω–∞ HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞.`);
        } else {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —à–ª—é–∑–∞. –°—Ç–∞—Ç—É—Å: ${response.status}. –û—Ç–≤–µ—Ç: ${errorText}`);
        }
      }
      metadataJson = await response.json();
      console.log(`  –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —à–ª—é–∑. –ò–º—è: ${metadataJson.name}`);
    } catch (fetchError) {
      console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —à–ª—é–∑–∞ –¥–ª—è CID ${cid}: ${fetchError.message}`);
      totalErrors += copiesPerNft;
      console.error(`     –ü—Ä–æ–ø—É—Å–∫ –º–∏–Ω—Ç–∏–Ω–≥–∞ ${copiesPerNft} –∫–æ–ø–∏–π –¥–ª—è —ç—Ç–æ–≥–æ CID.`);
      continue;
    }

    // –ì–æ—Ç–æ–≤–∏–º –æ–±—â–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
     const metadataArgs = {
        name: metadataJson.name || "Unnamed NFT",
        symbol: metadataJson.symbol || "UNSYM",
        // URI –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö NFT –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ç–≤–æ–π –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —à–ª—é–∑ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        uri: `${dedicatedPinataGateway}/ipfs/${cid}`, // –ò—Å–ø–æ–ª—å–∑—É–µ–º URI —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º —à–ª—é–∑–æ–º
        sellerFeeBasisPoints: metadataJson.seller_fee_basis_points === undefined ? 0 : metadataJson.seller_fee_basis_points,
        collection: {
          key: collectionAddress,
          verified: false,
        },
        creators: metadataJson.properties?.creators || metadataJson.creators || [
          {
            address: umi.identity.publicKey,
            share: 100,
            verified: true,
          },
        ],
     };

    // –ú–∏–Ω—Ç–∏–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π –¥–ª—è —ç—Ç–æ–≥–æ URI
    for (let j = 0; j < copiesPerNft; j++) {
      console.log(`  –ú–∏–Ω—Ç–∏–Ω–≥ –∫–æ–ø–∏–∏ ${j + 1}/${copiesPerNft}...`);
      try {
        const builder = await bubblegum.mintToCollectionV1(umi, {
          leafOwner: receiverAddress, // –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
          merkleTree: treeAddress,
          collectionMint: collectionAddress, // –ê–¥—Ä–µ—Å –∫–æ–ª–ª–µ–∫—Ü–∏–∏
          metadata: metadataArgs, // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        console.log("   –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...");
        const result = await builder.sendAndConfirm(umi, {
          send: { skipPreflight: true },
          confirm: { strategy: { type: 'blockhash', blockhash: (await umi.rpc.getLatestBlockhash()).blockhash } }
        });
        const signature = result.signature;

        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ! –ö–æ–ø–∏—è ${j + 1} –¥–ª—è ${metadataArgs.name} —Å–æ–∑–¥–∞–Ω–∞.`);
        console.log(`   –ü–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${bs58.encode(signature)}`);
        totalMinted++;

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –º–∏–Ω—Ç–æ–º
        if (i < nftUris.length -1 || j < copiesPerNft - 1) { // –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ —Å–∞–º–æ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∏–Ω—Ç–∞
             console.log(`   –ü–∞—É–∑–∞ ${delayBetweenMintsMs / 1000} —Å–µ–∫...`);
             await sleep(delayBetweenMintsMs);
        }

      } catch (mintError) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–Ω—Ç–∏–Ω–≥–µ –∫–æ–ø–∏–∏ ${j + 1} –¥–ª—è URI ${currentUri}:`);
        // –í—ã–≤–æ–¥–∏–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if (mintError.logs) {
            console.error("   –õ–æ–≥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:");
            mintError.logs.forEach(log => console.error("     "+ log));
        } else {
             console.error("   –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:", mintError);
        }
        totalErrors++;
        // –†–µ—à–∞–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å break, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ)
        // continue; // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –∫–æ–ø–∏—é –∏ –∏–¥–µ–º –¥–∞–ª—å—à–µ
      }
    }
  }

  console.log(`\n--- –ú–∏–Ω—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω ---`);
  console.log(`–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ NFT: ${totalMinted}`);
  console.log(`–û—à–∏–±–æ–∫ –ø—Ä–∏ –º–∏–Ω—Ç–∏–Ω–≥–µ: ${totalErrors}`);
  console.log(`–í—Å–µ NFT –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –∞–¥—Ä–µ—Å: ${receiverAddressStr}`);
}

// –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
mintCompressedNftCopies().catch(err => { // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    console.error("\n--- –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –º–∏–Ω—Ç–∏–Ω–≥–∞ ---");
    console.error(err);
}); 