// create_merkle_tree.js (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Umi –∏ Bubblegum - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è require)
const { createUmi } = require("@metaplex-foundation/umi-bundle-defaults");
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç bubblegum
const bubblegum = require("@metaplex-foundation/mpl-bubblegum");
// –ë–µ—Ä–µ–º –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ umi
const { keypairIdentity, generateSigner } = require("@metaplex-foundation/umi");
const bs58 = require("bs58");
const dotenv = require("dotenv");
const fs = require("fs");

dotenv.config();

// --- –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ---
const payerPrivateKey = process.env.PRIVATE_KEY;
if (!payerPrivateKey) {
  throw new Error("PRIVATE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env");
}
// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—à —Ç–µ–∫—É—â–∏–π RPC-—ç–Ω–¥–ø–æ–∏–Ω—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ
const USER_RPC_URL = process.env.RPC_URL;
// –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ RPC-—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã Solana
const MAIN_RPC_URL = "https://api.mainnet-beta.solana.com";
const BACKUP_RPC_URLS = [
  "https://solana-api.projectserum.com",
  "https://rpc.ankr.com/solana",
  USER_RPC_URL, // –≤–∞—à RPC –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
].filter(url => url); // —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ URL

console.log("–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ RPC-—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã Solana:");
console.log(`–†–µ–∑–µ—Ä–≤–Ω—ã–µ: ${BACKUP_RPC_URLS.join(', ')}`);

const maxDepth = 12;
const maxBufferSize = 32;
// canopyDepth –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —è–≤–Ω–æ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Bubblegum createTree

const treeAddressFile = "tree_address.txt";
// --- ---

async function createMerkleTreeWithUmi() {
  console.log("--- –°–æ–∑–¥–∞–Ω–∏–µ –î–µ—Ä–µ–≤–∞ –ú–µ—Ä–∫–ª–∞ —Å Umi –∏ Bubblegum ---");

  // –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ –æ—á–µ—Ä–µ–¥–∏ –∫ –∫–∞–∂–¥–æ–º—É RPC, –Ω–∞—á–∏–Ω–∞—è —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—É–±–ª–∏—á–Ω–æ–≥–æ
  let umi = null;
  let connectedSuccessfully = false;
  let currentRpcUrl = ""; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è UMI —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º URL
  const createUmiInstance = (url) => {
    const umi = createUmi(url, {
      httpOptions: {
        fetchMiddleware: (req, next) => next(req)
      }
    });

    // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ confirm, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª WebSocket
    umi.rpc.confirm = async (signature, commitment) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ HTTP
      const result = await umi.rpc.getSignatureStatuses([signature], { commitment });
      if (result.value[0]?.err) {
        throw new Error(`Transaction failed: ${JSON.stringify(result.value[0].err)}`);
      }
      return signature;
    };

    return umi;
  };

  // 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É–±–ª–∏—á–Ω—ã–π RPC
  currentRpcUrl = MAIN_RPC_URL;
  console.log(`–ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—É–±–ª–∏—á–Ω–æ–º—É RPC: ${currentRpcUrl}`);
  umi = createUmiInstance(currentRpcUrl);
  try {
    console.log("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...");
    const blockhash = await umi.rpc.getLatestBlockhash();
    console.log("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø—É–±–ª–∏—á–Ω—ã–π RPC —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω blockhash:", blockhash.blockhash);
    connectedSuccessfully = true;
  } catch (e) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—É–±–ª–∏—á–Ω–æ–º—É RPC ${currentRpcUrl}: ${e.message}`);
  }

  // 2. –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É–±–ª–∏—á–Ω—ã–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ (–≤–∫–ª—é—á–∞—è –≤–∞—à —á–∞—Å—Ç–Ω—ã–π, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ)
  if (!connectedSuccessfully) {
    for (const backupUrl of BACKUP_RPC_URLS) {
      currentRpcUrl = backupUrl;
      console.log(`üîÑ –ü—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π RPC: ${currentRpcUrl}`);
      umi = createUmiInstance(currentRpcUrl);

      try {
        const blockhash = await umi.rpc.getLatestBlockhash();
        console.log("‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–π RPC —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω blockhash:", blockhash.blockhash);
        connectedSuccessfully = true;
        break; // –ù–∞—à–ª–∏ —Ä–∞–±–æ—Ç–∞—é—â–∏–π RPC, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
      } catch (err) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º—É RPC ${currentRpcUrl}: ${err.message}`);
      }
    }
  }

  if (!connectedSuccessfully) {
    throw new Error("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É RPC-—ç–Ω–¥–ø–æ–∏–Ω—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RPC.");
  }

  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ RPC: ${currentRpcUrl}`);
  
  // 2. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞
  let secretKeyBytes;
  try {
    secretKeyBytes = bs58.decode(payerPrivateKey);
  } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ base58.");
      throw e;
  }
  const umiKeypair = umi.eddsa.createKeypairFromSecretKey(secretKeyBytes);
  umi.use(keypairIdentity(umiKeypair));
  console.log(`–ü–ª–∞—Ç–µ–ª—å—â–∏–∫: ${umi.identity.publicKey}`);

  // 3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã Bubblegum –∫ Umi - –∏—Å–ø–æ–ª—å–∑—É–µ–º bubblegum.mplBubblegum()
  umi.use(bubblegum.mplBubblegum());

  // 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ (–∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä—ã) –¥–ª—è –î–µ—Ä–µ–≤–∞ –ú–µ—Ä–∫–ª–∞
  const merkleTreeSigner = generateSigner(umi);
  const merkleTreeAddress = merkleTreeSigner.publicKey;
  console.log(`–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –î–µ—Ä–µ–≤–∞ –ú–µ—Ä–∫–ª–∞: ${merkleTreeAddress}`);

  console.log(`–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ä–µ–≤–∞: maxDepth=${maxDepth}, maxBufferSize=${maxBufferSize}`);

  console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —á–µ—Ä–µ–∑ Bubblegum...");

  try {
    // 5. –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Metaplex
    // https://developers.metaplex.com/bubblegum/create-trees
    const builder = await bubblegum.createTree(umi, {
      merkleTree: merkleTreeSigner,
      maxDepth: maxDepth,
      maxBufferSize: maxBufferSize,
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é confirmation, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è WebSocket
    const result = await builder.sendAndConfirm(umi, {
      send: { skipPreflight: true },
      confirm: { strategy: { type: 'blockhash', blockhash: (await umi.rpc.getLatestBlockhash()).blockhash } }
    });
    const signature = result.signature;

    console.log("\n--- –£—Å–ø–µ—Ö! ---");
    console.log(`‚úÖ –î–µ—Ä–µ–≤–æ –ú–µ—Ä–∫–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!`);
    console.log(`–ê–¥—Ä–µ—Å –î–µ—Ä–µ–≤–∞ –ú–µ—Ä–∫–ª–∞: ${merkleTreeAddress}`);
    console.log(`–ü–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${bs58.encode(signature)}`);

    fs.writeFileSync(treeAddressFile, merkleTreeAddress.toString());
    console.log(`–ê–¥—Ä–µ—Å –¥–µ—Ä–µ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: ${treeAddressFile}`);

  } catch (error) {
    console.error("\n--- –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –î–µ—Ä–µ–≤–∞ –ú–µ—Ä–∫–ª–∞ ---");
    console.error("–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
    if (error.logs) {
        console.error("–õ–æ–≥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:");
        error.logs.forEach(log => console.error(log));
    }
  }
}

// –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
createMerkleTreeWithUmi().catch(err => {
    console.error("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", err);
}); 